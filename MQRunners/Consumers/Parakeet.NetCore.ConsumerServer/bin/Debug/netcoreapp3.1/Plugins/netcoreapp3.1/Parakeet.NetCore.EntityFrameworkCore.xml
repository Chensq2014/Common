<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Parakeet.NetCore.EntityFrameworkCore</name>
    </assembly>
    <members>
        <member name="T:Parakeet.NetCore.EntityFrameworkCore.ConnectionStringResolver">
            <summary>
            字符串解析器
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.EntityFrameworkCore.MigrationsModelDifferWithoutForeignKey">
            <summary>
            排除Code First迁移时导航属性生成数据库真实外键
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.MigrationsModelDifferWithoutForeignKey.GetDifferences(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
            去掉数据库生成外键操作
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext})">
            <summary>
            构造函数，有参数就必须告诉容器需要依赖注入
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.LocationAreas">
            <summary>
            位置区域（全国省市区城乡等区域代码位置信息）
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.Notifies">
            <summary>
            消息表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.Organizations">
            <summary>
            组织机构表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.OrganizationUsers">
            <summary>
            机构岗位用户表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.Projects">
            <summary>
            项目表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.ProjectUsers">
            <summary>
            项目用户表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.ProjectAttachments">
            <summary>
            项目附件表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.Needs">
            <summary>
            需求表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.NeedAttachments">
            <summary>
            需求附件表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.AreaTenants">
            <summary>
            区域租户表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.TenantDbConnectionStrings">
            <summary>
            区域租户字符串连接表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.Suppliers">
            <summary>
            供应商表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.Thresholds">
            <summary>
            阈值管理
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.Devices">
            <summary>
            设备表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.DeviceExtends">
            <summary>
            设备扩展表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.DeviceKeySecrets">
            <summary>
            设备区域转发密钥表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.DeviceSequences">
            <summary>
            设备序号表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.DeviceMediators">
            <summary>
            设备转发表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.DeviceWorkers">
            <summary>
            设备人员表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.DeviceAnalogRules">
            <summary>
            设备数据模拟表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.Workers">
            <summary>
            劳务人员表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.Mediators">
            <summary>
            中介器表
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.Licenses">
            <summary>
            许可证
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.LicenseResources">
            <summary>
            许可证资源
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.Sections">
            <summary>
            小区
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.Houses">
            <summary>
            房间
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.Products">
            <summary>
            产品
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext.SecurePolicies">
            <summary>
            安全策略
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContextModelCreatingExtensions.ConfigureNetCore(Microsoft.EntityFrameworkCore.ModelBuilder,System.Boolean,System.Action{Parakeet.NetCore.EntityFrameworkCore.CustomerModelBuilderConfigurationOptions})">
            <summary>
            公共实体映射(IdentityServer 和Host都会调用这个共用配置,确保生成相同的数据库表)
            </summary>
            <param name="builder"></param>
            <param name="isMigrationDbContext"></param>
            <param name="optionsAction"></param>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContextModelCreatingExtensions.BuilderExtention(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            ModelBuilder扩展
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContextModelCreatingExtensions.UniformNumberPrecision(Microsoft.EntityFrameworkCore.ModelBuilder,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})">
            <summary>
            统一小数位数
            </summary>
            <param name="builder">ModelBuilder</param>
            <param name="mutableProperties">类字段属性上的属性集合mutableProperties</param>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContextModelCreatingExtensions.PgSqlDateTimeFormat(Microsoft.EntityFrameworkCore.ModelBuilder,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})">
            <summary>
            统一日期时间戳位数
            </summary>
            <param name="builder">ModelBuilder</param>
            <param name="mutableProperties">类字段属性上的属性集合mutableProperties</param>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContextModelCreatingExtensions.MapEntityComments(Microsoft.EntityFrameworkCore.ModelBuilder,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            映射实体注释,字段类型到migration-->执行migration之后就更新到数据库表和字段里了
            </summary>
            <param name="builder">ModelBuilder实体与数据库之间关系的的建设者</param>
            <param name="properties">所有有description的实体属性集合</param>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContextModelCreatingExtensions.MapEntityProertyComment``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0})">
            <summary>
            指定实体类Comment
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typeBuilder"></param>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContextModelCreatingExtensions.ConfigureCustomUserProperties``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0})">
            <summary>
            配置user上的自定义属性 值类型Address除外
            </summary>
            <typeparam name="TUser"></typeparam>
            <param name="b"></param>
        </member>
        <member name="T:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`2">
            <summary>
            Base class for custom repositories of the application.可以在这里扩展批量插入 
            需要在模块中依赖注入泛型仓储来扩展默认仓储没有的实现，泛型接口是独立的，并不影响默认仓储
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <typeparam name="TPrimaryKey">Primary key type of the entity</typeparam>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`2.BulkInsertAsync(System.Collections.Generic.IList{`0})">
            <summary>
            sqlserver 批量插入
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`2.BulkDeleteAsync(System.Collections.Generic.IList{`0})">
            <summary>
            sqlserver 批量删除
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`2.PostgreBulkInsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Messaia.Net.PostgreSQL.BulkExtensions 批量插入
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1">
            <summary>
            Base class for custom repositories of the application.
            This is a shortcut of <see cref="T:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`2"/> for <see cref="T:System.Guid"/> primary key.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="F:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1._cacheTypePropertyService">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.#ctor(Parakeet.NetCore.Storage.ICacheService,Volo.Abp.EntityFrameworkCore.IDbContextProvider{Parakeet.NetCore.EntityFrameworkCore.NetCoreDbContext})">
            <summary>
            IServiceProvider负责提供实例 (IServiceCollection(context.Services)负责注册)
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.BulkSqlInsert(System.Collections.Generic.IList{`0})">
            <summary>
            实体集除公共属性与字段外的insert sql参数化语句 读写分离--写
            1、默认的dbcontext 链接读数据库的字符串为 "读"数据字符串。
            2、在框架里面写一个 批量插入，更新，和删除的sql操作，数据库连接字符串读取配置文件里面的"写"数据库字符串。 
            </summary>
            <param name="entities">插入数据集合</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.SqlInsert(`0)">
            <summary>
            单个实体sql插入
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.SqlInsertRow(System.Collections.Generic.List{System.Reflection.PropertyInfo},`0,System.Collections.Generic.List{Microsoft.Data.SqlClient.SqlParameter},System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,Microsoft.Data.SqlClient.SqlParameter[]},System.Text.StringBuilder,System.Int32@)">
            <summary>
            单行sql/sqlparameter
            </summary>
            <param name="propInfos">实体属性</param>
            <param name="entity">实体</param>
            <param name="sqlParameters">拼接sql需要的所有参数集合</param>
            <param name="tableName">实体表名</param>
            <param name="propNames">实体属性列名</param>
            <param name="sqlParameterRows">字典：每行sql都准备一个单独的sqlparameter</param>
            <param name="sql">拼接sql对象</param>
            <param name="parameterIndex">单行sqlparameter 参数标识不重复</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.SqlUpdate``1(Parakeet.NetCore.Dtos.KeyValueDto{System.Guid,System.String})">
            <summary> 
            更新操作的Sql语句 读写分离--写
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.GetPropertiesFromJson(System.Type,System.String)">
            <summary>
            就是通过json字符串找出更新的字段 排除Id
            </summary>
            <param name="type"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.SqlDelete``1(Parakeet.NetCore.Dtos.InputIdDto)">
            <summary>
            删除单条实体的Sql参数化语句 读写分离--写
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.BulkSqlDelete``1(Parakeet.NetCore.Dtos.InputIdsDto)">
            <summary>
            删除多条实体的Sql参数化语句 读写分离--写
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.SqlQuery``1(Parakeet.NetCore.Dtos.InputIdDto)">
            <summary>
            根据id查询实体
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.SqlQueryList``1(Parakeet.NetCore.Dtos.InputIdsDto)">
            <summary>
            根据ids查询实体集合
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.SqlQueryByCondition``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据表达式目录树转sql参数化查询
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.ExecuteSqlWithParameterAsync(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Data.SqlClient.SqlParameter[]})">
            <summary>
            异步直接执行单条sql带parameters语句  可做读写分离-默认dbcontext上的连接字符串
            </summary>
            <param name="sqlParameterPair">sql参数化字符串/参数值</param>
            <returns>task</returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.ExecuteSqlWithParameters(System.Collections.Generic.Dictionary{System.String,Microsoft.Data.SqlClient.SqlParameter[]},System.Func{System.Collections.Generic.List{Microsoft.Data.SqlClient.SqlCommand},System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            参数化执行多条sql 多个SqlCommand 读写分离--写操作的都通过这个方法执行参数化的sql
            </summary>
            <param name="sqlParametersDic">参数化sql与参数对应的值的集合</param>
            <param name="func">上端传入的委托逻辑(下端需要传入一个List《SqlCommand> cmdList对象)</param>
            <returns>一个整数</returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.ExecuteQuary``1(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Data.SqlClient.SqlParameter[]},System.Func{Microsoft.Data.SqlClient.SqlCommand,``0})">
            <summary>
            根据Id查询实体委托
            </summary>
            <typeparam name="TEntity">类型</typeparam>
            <param name="sqlParameterPair">sql参数化字符串/参数值</param>
            <param name="func">上端传入委托逻辑(需要传入一个SqlCommand cmd对象，返回TEntity对象)</param>
            <returns>TEntity对象</returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.ExecuteQuaryList``1(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Data.SqlClient.SqlParameter[]},System.Func{Microsoft.Data.SqlClient.SqlCommand,System.Collections.Generic.List{``0}})">
            <summary>
            查询表中所有实体委托
            </summary>
            <typeparam name="TEntity">类型</typeparam>
            <param name="sqlParameterPair">查询sql参数化字符串/参数值</param>
            <param name="func">上端传入委托逻辑(需要传入一个SqlCommand cmd对象返回List TEntity>对象集合)</param>
            <returns>List TEntity>对象集合</returns>
        </member>
        <member name="M:Parakeet.NetCore.EntityFrameworkCore.Repositories.NetCoreRepositoryBase`1.SaveChange(System.Collections.Generic.List{Microsoft.Data.SqlClient.SqlCommand})">
            <summary>
            写数据库 同一个连接多次操作之后 使用数据库事务统一SaveChange  上面func的返回值为void的特例
            </summary>
        </member>
    </members>
</doc>
