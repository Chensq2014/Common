<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Parakeet.NetCore.Domain.Shared</name>
    </assembly>
    <members>
        <member name="F:Parakeet.NetCore.CustomerConsts.GlobalBundleName">
            <summary>
            系统默认的bundle名称
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.HeaderOrganizationId">
            <summary>
            Header OrganizationId属性常量
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.HeaderCompanyId">
            <summary>
            Header CompanyId属性常量
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.HeaderProjectId">
            <summary>
            Header ProjectId属性常量
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.PersonalCaches">
            <summary>
            个性化验证/验证码缓存组
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.UserLocker">
            <summary>
            UserLocker缓存组
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.LocationArea">
            <summary>
            省市区列表信息缓存组 
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.UserUnReadNotify">
            <summary>
            UserUnReadNotify缓存组
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.DefaultPageSize">
            <summary>
                Default page size for paged requests.
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.MaxPageSize">
            <summary>
                Maximum allowed page size for paged requests.
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.DefaultSorting">
            <summary>
                默认排序
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.MinNumber">
            <summary>
                随机数最小值.六位数
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.MaxNumber">
            <summary>
                随机数最大值.六位数
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.MinValue">
            <summary>
                最小值范围
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.MaxValue">
            <summary>
                最大值范围
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.Decimal279">
            <summary>
            十进制 Decimal 小数长度27，精度9
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.Decimal273">
            <summary>
            十进制 Decimal 小数长度27，精度3
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomerConsts.Timestamptz">
            <summary>
            Pgsql时间格式 带时区的 timestamptz (不带时区的 timestamp)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Magics.HANDLER_TYPE">
            <summary>
            处理类型
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Magics.VERSION">
            <summary>
            版本类型
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Converter.Server.BaseServer">
            <summary>
            进制转换服务
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Converter.Server.BaseServer.CharArray">
            <summary>
            进制字符数组
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Converter.Server.BaseServer.BitType">
            <summary>
            进制类型 2 4 8 16
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Converter.Server.BaseServer.CharToInt(System.Char)">
            <summary>
            进制字符转整数
            </summary>
            <param name="charVal"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Converter.Server.BaseServer.IntToChar(System.Int32)">
            <summary>
            整数转字符
            </summary>
            <param name="charVal"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Converter.Server.BaseServer.IsValid(System.String,System.Char[])">
            <summary>
            验证是否所属进制字符串
            </summary>
            <param name="val"></param>
            <param name="charArray"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Converter.Server.BaseServer.Self2DEC(System.String)">
            <summary>
            当前进制转十进制
            </summary>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Converter.Server.BaseServer.DEC2Self(System.String)">
            <summary>
            十进制转当前进制
            </summary>
            <param name="originalValue"></param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Converter.Server.BINServer">
            <summary>
            二进制转换器
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Converter.Server.BINServer.StrToBin(System.String)">
            <summary>
            字符串转二进制
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Converter.Server.BINServer.BinToStr(System.String)">
            <summary>
            二进制转字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Converter.Server.BitContainer.ToString">
            <summary>
            重写ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Converter.Server.DECServer">
            <summary>
            十进制转换器
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Converter.Server.HEXServer">
            <summary>
            二进制转换器
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.CustomAttributes.AbstractValidateAttribute">
            <summary>
            Attribute抽象类，自定义的Attribute继承它
            特性是在编译时确定的，构造函数/属性/字段，都不能用变量，
            所以netMvc filter是不能注入的，在necore里面才可以注入
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.CustomAttributes.AttributeExtention">
            <summary>
            object对象验证扩展
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.AttributeExtention.Validate``1(``0)">
            <summary>
            给所有类型 提供静态扩展验证方法 
            </summary>
            <typeparam name="T">当前实例所属类型，T也可以是object 因为object对象是所有对象的父级</typeparam>
            <param name="value">调用validate方法的当前实例</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.AttributeExtention.GetColumnName(System.Reflection.PropertyInfo)">
            <summary>
            获取列名 PropertyInfo静态扩展
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.AttributeExtention.GetMappingName(System.Reflection.MemberInfo)">
            <summary>
            PropertyInfo的父类是MemberInfo
            </summary>
            <param name="type">可以是type  也可以是property</param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.CustomAttributes.BaseFieldAttribute">
            <summary>
            所有实体公共字段特性类(使用反射sql时有时需要排除这几个字段)
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.CustomAttributes.EmailAttribute">
            <summary>
            邮件 Attribute
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.CustomAttributes.ExportAttribute">
            <summary>
            是否支持导出属性
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.CustomAttributes.NotSetAttribute">
            <summary>
            NotConnectAttribute  用一个特性来表示不需要数据库读取的属性
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.CustomAttributes.RegexAttribute">
            <summary>
            正则表达式 Attribute
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomAttributes.RegexAttribute.RegexExpression">
            <summary>
            自定义正则表达式
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.RegexAttribute.#ctor(System.String)">
            <summary>
            用户传入正则规则字符串：字符串格式参考EmailAttribute
            </summary>
            <param name="regex"></param>
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.RegexAttribute.Validate``1(``0)">
            <summary>
            根据规则验证方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns>验证结果</returns>
        </member>
        <member name="T:Parakeet.NetCore.CustomAttributes.Regexes">
            <summary>
            正则表达式辅助
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomAttributes.Regexes.CamelCaseFirst">
            <summary>
            查找首字母小写开头的字符串 字符串@开头，代表可以在字符串中识别转义字符
            \b：零宽单词边界，仅匹配一个位置且仅匹配一次
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomAttributes.Regexes.CapitalLetters">
            <summary>
            匹配大写字母处 匹配多次 
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomAttributes.Regexes.Email">
            <summary>
            邮箱 @"^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$"  /^表达式$/ 这是前端js的规范写法
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomAttributes.Regexes.TelePhone">
            <summary>
            最新手机+固话正则表达式
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomAttributes.Regexes.MobilePhone">
            <summary>
            电话
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomAttributes.Regexes.IdCardNo">
            <summary>
            身份证号
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomAttributes.Regexes.RegisterName">
            <summary>
            只能由字母数字和下划线组成，字母开头 长度6-18位
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomAttributes.Regexes.Register">
            <summary>
            只能由字母数字和空格tab换页换行符组成
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomAttributes.Regexes.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomAttributes.Regexes.Date">
            <summary>
            Date日期
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.CustomAttributes.Regexes.NewDate">
            <summary>
            newDate日期
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.GetRegex(System.String)">
            <summary>
            根据规则获取正则表达式对象Regex
            </summary>
            <param name="rule">正则表达式 不为null 传入正则表达式要求要么都带^$，要么都不带^$</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsMatch(System.String,System.String)">
            <summary>  
            验证字符串是否匹配正则表达式描述的规则  
            </summary>  
            <param name="inputStr">待验证的字符串</param>  
            <param name="patternStr">正则表达式字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsMatch(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>  
            验证字符串是否匹配正则表达式描述的规则  
            </summary>  
            <param name="inputStr">待验证的字符串</param>  
            <param name="patternStr">正则表达式字符串</param>  
            <param name="ifIgnoreCase">匹配时是否不区分大小写</param>  
            <param name="ifValidateWhiteSpace">是否验证空白字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsNumber(System.String)">
            <summary>  
            验证数字(double类型)  
            [可以包含负号和小数点]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsInteger(System.String)">
            <summary>  
            验证整数  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsIntegerNotNagtive(System.String)">
            <summary>  
            验证非负整数  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsIntegerPositive(System.String)">
            <summary>  
            验证正整数  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsDecimal(System.String)">
            <summary>  
            验证小数  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsEnglishCharacter(System.String)">
            <summary>  
            验证只包含英文字母  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsIntegerAndEnglishCharacter(System.String)">
            <summary>  
            验证只包含数字和英文字母  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsChineseCharacter(System.String)">
            <summary>  
            验证只包含汉字  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsIntegerLength(System.String,System.Int32,System.Int32)">
            <summary>  
            验证数字长度范围（数字前端的0计长度）  
            [若要验证固定长度，可传入相同的两个长度数值]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <param name="lengthBegin">长度范围起始值（含）</param>  
            <param name="lengthEnd">长度范围结束值（含）</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsStringInclude(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>  
            验证字符串包含内容  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <param name="withEnglishCharacter">是否包含英文字母</param>  
            <param name="withNumber">是否包含数字</param>  
            <param name="withChineseCharacter">是否包含汉字</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsStringLength(System.String,System.Int32,System.Int32)">
            <summary>  
            验证字符串长度范围  
            [若要验证固定长度，可传入相同的两个长度数值]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <param name="lengthBegin">长度范围起始值（含）</param>  
            <param name="lengthEnd">长度范围结束值（含）</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsStringLengthOnlyNumberAndEnglishCharacter(System.String,System.Int32,System.Int32)">
            <summary>  
            验证字符串长度范围（字符串内只包含数字和/或英文字母）  
            [若要验证固定长度，可传入相同的两个长度数值]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <param name="lengthBegin">长度范围起始值（含）</param>  
            <param name="lengthEnd">长度范围结束值（含）</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsStringLengthByInclude(System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>  
            验证字符串长度范围  
            [若要验证固定长度，可传入相同的两个长度数值]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <param name="withEnglishCharacter">是否包含英文字母</param>  
            <param name="withNumber">是否包含数字</param>  
            <param name="withChineseCharacter">是否包含汉字</param>  
            <param name="lengthBegin">长度范围起始值（含）</param>  
            <param name="lengthEnd">长度范围结束值（含）</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsStringByteLength(System.String,System.Int32,System.Int32)">
            <summary>  
            验证字符串字节数长度范围  
            [若要验证固定长度，可传入相同的两个长度数值；每个汉字为两个字节长度]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <param name="lengthBegin">长度范围起始值（含）</param>  
            <param name="lengthEnd">长度范围结束值（含）</param>  
            <returns></returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsDateTime(System.String)">
            <summary>  
            验证日期  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsTelePhoneNumber(System.String)">
            <summary>  
            验证固定电话号码  
            [3位或4位区号；区号可以用小括号括起来；区号可以省略；区号与本地号间可以用减号或空格隔开；可以有3位数的分机号，分机号前要加减号]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsMobilePhoneNumber(System.String)">
            <summary>  
            验证手机号码  
            [可匹配"(+86)013325656352"，括号可以省略，+号可以省略，(+86)可以省略，11位手机号前的0可以省略；11位手机号第二位数可以是3、4、5、8中的任意一个]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsPhoneNumber(System.String)">
            <summary>  
            验证电话号码（可以是固定电话号码或手机号码）  
            [固定电话：[3位或4位区号；区号可以用小括号括起来；区号可以省略；区号与本地号间可以用减号或空格隔开；可以有3位数的分机号，分机号前要加减号]]  
            [手机号码：[可匹配"(+86)013325656352"，括号可以省略，+号可以省略，(+86)可以省略，手机号前的0可以省略；手机号第二位数可以是3、4、5、8中的任意一个]]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsZipCode(System.String)">
            <summary>  
            验证邮政编码  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsEmail(System.String)">
            <summary>  
            验证电子邮箱  
            [@字符前可以包含字母、数字、下划线和点号；@字符后可以包含字母、数字、下划线和点号；@字符后至少包含一个点号且点号不能是最后一个字符；最后一个点号后只能是字母或数字]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsURL(System.String)">
            <summary>  
            验证网址（可以匹配IPv4地址但没对IPv4地址进行格式验证；IPv6暂时没做匹配）  
            [允许省略"://"；可以添加端口号；允许层级；允许传参；域名中至少一个点号且此点号前要有内容]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsIPv4(System.String)">
            <summary>  
            验证IPv4地址  
            [第一位和最后一位数字不能是0或255；允许用0补位]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsIPv6(System.String)">
            <summary>  
            验证IPv6地址  
            [可用于匹配任何一个合法的IPv6地址]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsIDCard15(System.String)">
            <summary>  
            验证一代身份证号（15位数）  
            [长度为15位的数字；匹配对应省份地址；生日能正确匹配]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsIDCard18(System.String)">
            <summary>  
            验证二代身份证号（18位数，GB11643-1999标准）  
            [长度为18位；前17位为数字，最后一位(校验码)可以为大小写x；匹配对应省份地址；生日能正确匹配；校验码能正确匹配]  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsIDCard(System.String)">
            <summary>  
            验证身份证号（不区分一二代身份证号）  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsLongitude(System.String)">
            <summary>  
            验证经度  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.Regexes.IsLatitude(System.String)">
            <summary>  
            验证纬度  
            </summary>  
            <param name="input">待验证的字符串</param>  
            <returns>是否匹配</returns>  
        </member>
        <member name="P:Parakeet.NetCore.CustomAttributes.RemarkAttribute.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.CustomAttributes.RemarkAttribute.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.CustomAttributes.UserCacheLockAttribute.OperationName">
            <summary>
            要锁定的业务方法名称
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.CustomAttributes.UserCacheLockAttribute.Expiration">
            <summary>
            锁定时间，默认一分钟
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.CustomAttributes.UserCacheLockAttribute.#ctor(System.String,System.Int32)">
            <summary>
            用户缓存业务所锁
            </summary>
            <param name="operationName">业务方法名称</param>
            <param name="expirationMinutes">锁定时间，默认一分钟</param>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.BaseAppOptionDto">
            <summary>
            第三方组件账号与密钥基类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseAppOptionDto.AppId">
            <summary>
            唯一表示
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseAppOptionDto.SecurityKey">
            <summary>
            安全密钥
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.BaseAttachmentDto">
            <summary>
            基础附件类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseAttachmentDto.Attachment">
            <summary>
            附件基本信息
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseAttachmentDto.Order">
            <summary>
            文件顺序
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Dtos.BaseAttachmentDto._extensions">
            <summary>
            图片扩展名规则
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseAttachmentDto.IsImage">
            <summary>
            是否图片文件
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.BaseDto">
            <summary>
                Dto基类
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.BaseExportDto">
            <summary>
            导出公共基类 excel里面数据默认为double类型
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.BaseExportDto`1">
            <summary>
            导出公共泛型基类
            </summary>
            <typeparam name="TValue">excel单元格cell的值数据类型，excel默认为double</typeparam>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseExportDto`1.Id">
            <summary>
            节点Id
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseExportDto`1.ParentId">
            <summary>
            ParentId
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseExportDto`1.Level">
            <summary>
            层级
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseExportDto`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseExportDto`1.Amount">
            <summary>
            金额cell中的数值
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseExportDto`1.Date">
            <summary>
            日期
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.BaseTreeDto">
            <summary>
            DxTreeView公共基类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto.ParentId">
            <summary>
            父节点ParentIdString
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto`1.FatherId">
            <summary>
            父节点FatherId ParentIdString 
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto`1.DbId">
            <summary>
            数据库Id
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto`1.Selected">
            <summary>
            是否选中
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto`1.Sort">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto`1.Name">
            <summary>
            节点展示名称
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto`1.Key">
            <summary>
            节点展示的Key
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto`1.Expanded">
            <summary>
            组件是否被展开
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto`1.Disabled">
            <summary>
            组件是否被禁用
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto`1.Remark">
            <summary>
            备注，可以作为title 标注上去
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto`1.TypeIcon">
            <summary>
            标识展示的icon 图片
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto`1.ShowSelectBox">
            <summary>
            是否展示selectBox
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto`1.DisplayDirection">
            <summary>
            默认为x
            x：横向，y：纵向
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto`1.Data">
            <summary>
            扩展数据点
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.BaseTreeDto`1.Level">
            <summary>
            节点层级
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.CaptchaResultDto.CaptchaCode">
            <summary>验证码</summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.CaptchaResultDto.CaptchaByteData">
            <summary>Base64</summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.CaptchaResultDto.CaptchBase64Data">
            <summary>Base64字符串</summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.CaptchaResultDto.Timestamp">
            <summary>生成时间</summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.DateLineDto">
            <summary>
            时间轴dto
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.DynamicFieldDto">
            <summary>
            动态列(时间轴)
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.DynamicFieldDto`1">
            <summary>
            动态列泛型基类
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.DynamicFieldDto`1.DataField">
            <summary>
            属性/字段名称
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.DynamicFieldDto`1.Caption">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.DynamicFieldDto`1.Date">
            <summary>
            日期
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.DynamicFieldDto`1.AllowEditing">
            <summary>
            是否允许编辑
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.DynamicFieldDto`1.Custom">
            <summary>
            提供给用户自定义
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.DynamicFieldDto`1.Season">
            <summary>
            季度
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.DynamicFieldDto`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.DynamicFieldDto`1.Limit">
            <summary>
            上限
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.DynamicFieldDto`1.Children">
            <summary>
            子类动态列
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.EnumTypeItemDto">
            <summary>
                枚举辅助dto类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.EnumTypeItemDto.ItemKey">
            <summary>
                枚举项整型值
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.EnumTypeItemDto.ItemKeyString">
            <summary>
                枚举项整型值字符串
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.EnumTypeItemDto.ItemStringName">
            <summary>
                枚举项字符串
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.EnumTypeItemDto.ItemDescription">
            <summary>
                枚举项描述
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.EnumTypeItemDto.ItemDescriptionOrName">
            <summary>
                枚举项描述/枚举项字符串
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.Gateway.GatewayKeySecretOptionDto">
            <summary>
            网关配置
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Gateway.GatewayKeySecretOptionDto.AppKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Gateway.GatewayKeySecretOptionDto.AppSecret">
            <summary>
            私钥
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Gateway.GatewayKeySecretOptionDto.ServerUrl">
            <summary>
            网关地址/grpc server服务端地址
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.Hzyf.ExecuteTaskResultDto`1">
            <summary>
            宇泛设置任务返回结果
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.ExecuteTaskResultDto`1.Code">
            <summary>
            设备型号
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.ExecuteTaskResultDto`1.Msg">
            <summary>
            返回消息
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.ExecuteTaskResultDto`1.Result">
            <summary>
            处理结果 1
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.ExecuteTaskResultDto`1.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.ExecuteTaskResultDto`1.Data">
            <summary>
            返回Data数据
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.Hzyf.ExecuteTaskResultDto">
            <summary>
            默认返回data为字符串
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.Hzyf.GetTaskDto">
            <summary>
            获取任务参数
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.GetTaskDto.DeviceKey">
            <summary>
            设备序列号 (真实序列号不能更改)
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.Hzyf.HandleFeedBackDto">
            <summary>
            处理任务返回结果
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.HandleFeedBackDto.DeviceKey">
            <summary>
            设备序列号 (真实序列号不能更改)
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.HandleFeedBackDto.TaskNo">
            <summary>
            任务编号
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.HandleFeedBackDto.Result">
            <summary>
            处理结果
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.Hzyf.UfaceFaceCreateDto">
            <summary>
            下发人员照片对象
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceFaceCreateDto.InterfaceName">
            <summary>
            interfaceName
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceFaceCreateDto.TaskNo">
            <summary>
            任务编号
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceFaceCreateDto.PersonId">
            <summary>
            人员Id
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceFaceCreateDto.FaceId">
            <summary>
            人脸Id
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceFaceCreateDto.ImgBase64">
            <summary>
            人员照片
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceFaceCreateDto.IsEasyWay">
            <summary>
            IsEasyWay
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceFaceCreateDto.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.Hzyf.UfaceHeartbeatDto">
            <summary>
            宇泛心跳回调数据
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceHeartbeatDto.DeviceKey">
            <summary>
            设备唯一标识码
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceHeartbeatDto.Time">
            <summary>
            设备当前时间戳
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceHeartbeatDto.Ip">
            <summary>
            设备当前 IP 地址
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceHeartbeatDto.PersonCount">
            <summary>
            设备当前注册人员数量
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceHeartbeatDto.FaceCount">
            <summary>
            设备当前注册的照片数量
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceHeartbeatDto.Version">
            <summary>
            设备版本号
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto">
            <summary>
            宇泛心跳回调数据
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.DeviceKey">
            <summary>
            设备唯一标识码
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.Time">
            <summary>
            设备当前时间戳
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.Ip">
            <summary>
            设备当前 IP 地址
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.PersonId">
            <summary>
            人员Id
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.Type">
            <summary>
            face/faceAndcard/idcard/card   0/1/2
            face_0（刷脸识别，且该人员在 passtime 内） face_1（刷脸识别，且该人员在 passtime 外）
            face_2（刷脸识别/口罩检测，且 识别失败/口罩检测失败）
            card_0（刷卡识别，且该人员在passtime 权限时间内 card_1（刷卡识别，且该人员在 passtime 外）
            card_2（刷卡识别，且识别失败 faceAndcard_0（双重认证，且该 人员在 passtime权限时间内）
            faceAndcard_1（双重认证，且刷 卡结果为该人员在 passtime 权 限时间外）
            faceAndcard_2（双重认证，且识 别失败）
            idcard_0（人证比对，且该人员 在 passtime 权限时间内）
            idcard_1（人证比对，且该人员 在 passtime 权限时间外）
            idcard_2（人证比对，且识别失 败）
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.IdNumber">
            <summary>
            身份证号
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.IdCardNum">
            <summary>
            卡号
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.Path">
            <summary>
            图片Path ftp路径
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.Base64">
            <summary>
            人脸识别base64图片
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.Data">
            <summary>
            身份证信息
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.IdentifyType">
             <summary>
             人员比对结果
            1：比对成功
            2：比对失败
            3：未进行比对
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.Model" -->
        <!-- Badly formed XML comment ignored for member "P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.RecModeType" -->
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.RecType">
            <summary>
            识别方式 1:本地识别 2:云端识别
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.AliveType">
            <summary>
            活体判断结果1：活体判断成功2：活体判断失败 3：未进行活体判断
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.AppId">
            <summary>
            设备AppId
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.Temperature">
            <summary>
            人员测量温度值(仅口罩测 温设备支持) 测温模式未打开下，返回 null 测温模式未打开，口罩检测未通 过返回 null
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.Standard">
             <summary>
            设置的体温异常标准(仅口罩 测温设备支持) 测温模式未打开下，返回 null 测温模式未打开，口罩检测未通 过返回 null
             </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfaceIdentityDto.TempUnit">
             <summary>
            温度单位(仅口罩测温设备支持) 1. 摄氏度 2. 华氏度
             </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.Hzyf.UfacePersonCreateDto">
            <summary>
            下发人员基本信息对象
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfacePersonCreateDto.InterfaceName">
            <summary>
            interfaceName
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfacePersonCreateDto.TaskNo">
            <summary>
            任务编号
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfacePersonCreateDto.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfacePersonCreateDto.Person">
            <summary>
            人员信息
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.Hzyf.UfacePersonDto">
            <summary>
            人员基本信息对象
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfacePersonDto.Id">
            <summary>
            人员Id
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfacePersonDto.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfacePersonDto.IdNumber">
            <summary>
            身份证号
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Hzyf.UfacePersonDto.IdCardNum">
            <summary>
            卡号
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.ImportFileDto">
            <summary>
            上传文件dto
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ImportFileDto.Code">
            <summary>
            上传验证码
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ImportFileDto.UploadGuid">
            <summary>
            创建页面没有保存数据前，使用保存文件功能保存的缓存文件，生成一个全球唯一Guid字符串作为目录，
            ~/upload/temp/{UploadGuid}/目录下，以区别网站的并发情况
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ImportFileDto.UploadFile">
            <summary>
            单文件上传
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ImportFileDto.Files">
            <summary>
            上传文件 UploadFiles对应与上传控件dxFileUploader的名称
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Dtos.ImportFileDto.AddFiles">
            <summary>
            自定义的上传文件最多20个...
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.InputDateTimeDto">
            <summary>
                可空Guid/DateTime类型的输入基类
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.InputIdDto`1">
            <summary>
                基础输入类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.InputIdDto`1.Id">
            <summary>
                Id必填
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.InputIdDto">
            <summary>
                Guid类型的输入基类
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.InputIdNullDto">
            <summary>
                可空Guid类型的输入基类
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.InputIdsDto`1">
            <summary>
                基础输入类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.InputIdsDto`1.Ids">
            <summary>
                Ids必填
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.InputIdsDto`1.CancelValid">
            <summary>
                取消验证参数
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.InputIdsDto">
            <summary>
                Guid类型的输入基类
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.InputIdsNullDto">
            <summary>
                Guid?类型的输入基类
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.InputNameDto">
            <summary>
                基础输入类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.InputNameDto.Name">
            <summary>
                名称必填
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.InputUrlDto">
            <summary>
                基础输入Url类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.InputUrlDto.Url">
            <summary>
                Url必填
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.KeyValueDto`2">
            <summary>
                包含Key Value的Dto
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Dtos.KeyValueDto`2.#ctor">
            <summary>
            KeyValueDto
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Dtos.KeyValueDto`2.#ctor(`0,`1)">
            <summary>
            KeyValueDto
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.KeyValueDto`2.Id">
            <summary>
                唯一标识Id
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.KeyValueDto`2.Text">
            <summary>
                Text
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.KeyValueDto`2.Value">
            <summary>
                Value
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.KeyValueDto`2.ExtraValue">
            <summary>
                ExtraValue
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.MailDto">
            <summary>
            邮件Dto
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.MailDto.From">
            <summary>
            发件人
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.MailDto.To">
            <summary>
            收件人
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.MailDto.Cc">
            <summary>
            抄送人
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.MailDto.Subject">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.MailDto.Body">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.MailDto.Footer">
            <summary>
            内容底部
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.MailDto.Host">
            <summary>
            服务器
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.MailDto.Port">
            <summary>
            邮件服务端口
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.MailDto.UserName">
            <summary>
            邮件用户名
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.MailDto.License">
            <summary>
            邮件密码
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.MailDto.EnableSsl">
            <summary>
            是否ssl加密
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.MailDto.Attachments">
            <summary>
            附件
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.ExceptionlessOptionDto">
            <summary>
            Exceptionless配置类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ExceptionlessOptionDto.ApiKey">
            <summary>
            Exceptionless ApiKey
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ExceptionlessOptionDto.ServerUrl">
            <summary>
            Exceptionless server服务端地址
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.FieldCheckOptionDto">
            <summary>
            前端编辑某个实体的一个字段，这个字段对应的属性名称Filed及属性值Value的选项类，
            另包含实体的Id,判断是否相等Equal等信息，用于构建表达式目录树与已存数据判断是否重复
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.FieldCheckOptionDto`1">
            <summary>
            实体属性/字段选项泛型基类
            </summary>
            <typeparam name="TPrimaryKey">实体主键</typeparam>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.FieldCheckOptionDto`2">
            <summary>
            实体属性/字段选项泛型基类
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.FieldCheckOptionDto`2.Field">
            <summary>
            实体属性/字段名称
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.FieldCheckOptionDto`2.Value">
            <summary>
            实体属性/字段 值
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.FieldCheckOptionDto`2.Id">
            <summary>
            系统里面Entity主键为int Id
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.FieldCheckOptionDto`2.Equal">
            <summary>
            检查条件:是否相等
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.RedisConnOptions">
            <summary>
            ServiceStack.Redis 缓存配置
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.RedisConnOptions.Host">
            <summary>
            主机地址
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.RedisConnOptions.Port">
            <summary>
            端口号 默认6379
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.RedisConnOptions.DatabaseId">
            <summary>
            Database 0-15 默认0
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.ROClientOptionDto">
            <summary>
            ROClientOptionDto
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ROClientOptionDto.AppKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ROClientOptionDto.AppSecret">
            <summary>
            私钥
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ROClientOptionDto.ServerUrl">
            <summary>
            grpc server服务端地址
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.SerilogOptionDto">
            <summary>
            SerilogOption 配置类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.SerilogOptionDto.Exceptionless">
            <summary>
            Exceptionless 配置类
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.WeixinOptionDto">
            <summary>
            企业微信配置类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.WeixinOptionDto.AgentId">
            <summary>
            应用Id【自建/三方】
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.QueryParamDto">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.QueryParamDto.Query">
            <summary>
            查询参数字符串
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.ResponseWrapper">
            <summary>
            响应包
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ResponseWrapper.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ResponseWrapper.Code">
            <summary>
            响应码
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ResponseWrapper.Count">
            <summary>
            总数量
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ResponseWrapper.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ResponseWrapper.Messages">
            <summary>
            消息s
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Dtos.ResponseWrapper.Succeed(System.String)">
            <summary>
            成功默认对象
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Dtos.ResponseWrapper.Error(System.String,System.Int32)">
            <summary>
            错误默认对象
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.ResponseWrapper`1.Data">
            <summary>
            返回的泛型数据
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.Tcp.TcpOptionDto">
            <summary>
            tcp配置文件反射类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Tcp.TcpOptionDto.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Tcp.TcpOptionDto.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.Tcp.TcpOptionDto.MaxPool">
            <summary>
            最大池
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.TicketWrapper.ExpiredAt">
            <summary>
            缓存预计过期时间
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.TicketWrapper.RequestCount">
            <summary>
            调用次数
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.TreeDto">
            <summary>
            DxTreeView公共dto类
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Dtos.TreeDto`1">
            <summary>
            DxTreeView公共基类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.TreeDto`1.Id">
            <summary>
            节点Id 泛型的给出new覆盖基类中的整型Id
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Dtos.TreeDto`1.ParentId">
            <summary>
            父节点ParentId
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Entities.BaseAttachmentEntity">
            <summary>
            附件基类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.BaseAttachmentEntity.Attachment">
            <summary>
            附件基本信息
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.BaseAttachmentEntity.Order">
            <summary>
            文件顺序使用decimal类型排序更好
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Entities.BaseEntity">
            <summary>
            实体类基类 确保只含有基础字段
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Entities.BaseEntity`1">
            <summary>
            泛型实体基类
            </summary>
            <typeparam name="TPrimaryKey">实体主键类型</typeparam>
        </member>
        <member name="M:Parakeet.NetCore.Entities.BaseEntity`1.SetEntityPrimaryKey(`0)">
            <summary>
            提供一个公共方法设置主键 protected
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Parakeet.NetCore.Entities.BaseHandlerType">
            <summary>
            处理类型名默认为全名
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Entities.License">
            <summary>
            许可证
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.License.AppId">
            <summary>
            AppId
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.License.AppKey">
            <summary>
            AppKey
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.License.AppSecret">
            <summary>
            AppSecret
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.License.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.License.ExpiredAt">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.License.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.License.LicenseResources">
            <summary>
            可访问资源
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Entities.LicenseResource">
            <summary>
            许可证资源
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.LicenseResource.Name">
            <summary>
            资源名称
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.LicenseResource.Code">
            <summary>
            资源Code确保唯一性
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.LicenseResource.ResourceType">
            <summary>
            资源类型 1=webApi
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.LicenseResource.Path">
            <summary>
            如果类型为1=webApi，那么将匹配请求资源路由，支持正则表达式，如：^/api.*
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.LicenseResource.Disabled">
            <summary>
            禁用
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.LicenseResource.LicenseId">
            <summary>
            LicenseId
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.LicenseResource.License">
            <summary>
            License
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.Ticket.AppId">
            <summary>
            AppId
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.Ticket.AppKey">
            <summary>
            AppKey
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.Ticket.AppSecret">
            <summary>
            AppSecret
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.Ticket.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.Ticket.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Entities.Ticket.ExpiredAt">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.AreaStatus">
            <summary>
            区域状态
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.AreaStatus.Active">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.AreaStatus.Deactive">
            <summary>
            停用
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.CarModelType">
            <summary>
            车辆类型, 0：轿车 1：运渣车 2：罐车
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.ChargeType">
            <summary>
             收费类型
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ChargeType.铝扣板">
            <summary>
            铝扣板
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ChargeType.风暖">
            <summary>
            风暖
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ChargeType.防护栏">
            <summary>
            防护栏
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ChargeType.扣板异形">
            <summary>
            扣板异形
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ChargeType.拆装扣板">
            <summary>
            拆装扣板
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ChargeType.人工面积补贴">
            <summary>
            人工面积补贴
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ChargeType.暗线">
            <summary>
            暗线
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ChargeType.硬包">
            <summary>
            硬包
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ChargeType.硬包基层加宽">
            <summary>
            硬包基层加宽
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ChargeType.包然气管">
            <summary>
            包然气管
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ChargeType.石膏线">
            <summary>
            石膏线
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.ColorProviders.PlanStatusColorProvider">
            <summary>
            状态颜色控制
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Enums.ColorProviders.PlanStatusColorProvider.GetColor(System.Enum)">
            <summary>
            获取枚举值对应颜色
            </summary>
            <param name="source">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Enums.ColorProviders.PlanStatusColorProvider.GetColor(System.Int32)">
            <summary>
            获取枚举值对应颜色
            </summary>
            <param name="enummer">枚举值</param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Enums.ColorProviders.TreeNodeLevelColorProvider">
            <summary>
            状态颜色控制
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Enums.ColorProviders.TreeNodeLevelColorProvider.GetColor(System.Enum)">
            <summary>
            获取枚举值对应颜色
            </summary>
            <param name="source">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Enums.ColorProviders.TreeNodeLevelColorProvider.GetColor(System.Int32)">
            <summary>
            获取枚举值对应颜色
            </summary>
            <param name="enummer">枚举值</param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Enums.ColorProviders.UserStatusColorProvider">
            <summary>
            状态颜色控制
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Enums.ColorProviders.UserStatusColorProvider.GetColor(System.Enum)">
            <summary>
            获取枚举值对应颜色
            </summary>
            <param name="source">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Enums.ColorProviders.UserStatusColorProvider.GetColor(System.Int32)">
            <summary>
            获取枚举值对应颜色
            </summary>
            <param name="enummer">枚举值</param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Enums.CraneStatus">
            <summary>
            起重机状态,  0：正常 1：预警 2：报警 3：违章4：其他
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.CraneType">
            <summary>
            起重机状态,  0：固定 1：移动 2：升降
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.DeepLevelType">
            <summary>
                级别:0、中国；1、省/直辖市/自治区；2、市；3、区/县；4、街道；5、村
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeepLevelType.Country">
            <summary>
                国家
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeepLevelType.Province">
            <summary>
                省/直辖市/自治区
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeepLevelType.City">
            <summary>
                城市(市辖区/县)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeepLevelType.Area">
            <summary>
                市辖区/县
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeepLevelType.Street">
            <summary>
                街道/乡/镇
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeepLevelType.Village">
            <summary>
                村
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.DeviceType">
            <summary>
            环境(1001) | 视频(1002) | 起重机(1003) | 升降机(1004) | 闸机(1005)，
            运渣车(1006) | 实名制(1007) | LED屏(1008) | 噪音(1009) | 安全帽(1010)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.Environment">
            <summary>
            环境
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.Video">
            <summary>
            视频
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.Crane">
            <summary>
            起重机
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.Lifter">
            <summary>
            升降机
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.Gate">
            <summary>
            闸机
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.SlagCar">
            <summary>
            运渣车
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.PersonLocation">
            <summary>
            人员定位
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.LED">
            <summary>
            LED屏
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.Noise">
            <summary>
            噪音
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.Helmet">
            <summary>
            安全帽
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.Foundationpit">
            <summary>
            基坑监测
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.FP_Totalstation">
            <summary>
            基坑-全站仪测量机器人
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.FP_FixInclinometer">
            <summary>
            基坑-固定式测斜仪器
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.FP_Reinforcementmeter">
            <summary>
            基坑-钢筋计
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.FP_Crackmeter">
            <summary>
            基坑-裂缝检测仪
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.FP_AnchorCableDynamometer">
            <summary>
            基坑-锚索测力计
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.FP_Osmometer">
            <summary>
            基坑-渗压计
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.FP_EarthPressuremeter">
            <summary>
            基坑-土压计
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.FP_Vibrometer">
            <summary>
            基坑-VF测振动仪
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.FP_Tiltmeter">
            <summary>
            基坑-倾角计
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.FP_StaticLevelmeter">
            <summary>
            基坑-静力水准仪
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.Watermeter">
            <summary>
            水表
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.Electricitymeter">
            <summary>
            电表
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.Gasmeter">
            <summary>
            气表
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceType.Weighbridge">
            <summary>
            地磅
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.DeviceWorkerState">
            <summary>
            设备用户状态(未下发/已下发)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceWorkerState.UnSendToDevice">
            <summary>
            未下发
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DeviceWorkerState.SendToDevice">
            <summary>
            已下发
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.DirectionState">
            <summary>
            运行方向，1:上升,2:下降
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.DoResult">
            <summary>
            请求状态
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DoResult.Failed">
            <summary>
            请求失败
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DoResult.Success">
            <summary>
            请求成功
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DoResult.OverTime">
            <summary>
            请求超时
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DoResult.NoAuthorization">
            <summary>
            未授权
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.DoResult.Other">
            <summary>
            其它错误
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.EducationType">
            <summary>
            教育程度
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EducationType.文盲">
            <summary>
            文盲
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EducationType.小学">
            <summary>
            小学
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EducationType.初中">
            <summary>
            初中
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EducationType.中专">
            <summary>
            中专
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EducationType.高中">
            <summary>
            高中
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EducationType.大专">
            <summary>
            大专
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EducationType.本科">
            <summary>
            本科
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EducationType.硕士">
            <summary>
            硕士
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EducationType.博士">
            <summary>
            博士
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EducationType.教授">
            <summary>
            教授
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EducationType.专家">
            <summary>
            专家
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EducationType.科学家">
            <summary>
            科学家
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.EntryState">
            <summary>
            操作状态,  1:进场 2:出场
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EnvironmentEnum.P">
            <summary>
            电源故障
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EnvironmentEnum.F">
            <summary>
            排放源停运
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EnvironmentEnum.C">
            <summary>
            校验
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EnvironmentEnum.M">
            <summary>
            维护
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EnvironmentEnum.T">
            <summary>
            超测上限
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EnvironmentEnum.D">
            <summary>
            故障
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EnvironmentEnum.S">
            <summary>
            设定值
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.EnvironmentEnum.N">
            <summary>
            正常
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.ErrorCode">
            <summary>
            错误码枚举
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ErrorCode.NotFound">
            <summary>
            没有找到
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ErrorCode.CacheLocked">
            <summary>
            已被锁定
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ErrorCode.Exist">
            <summary>
            已存在
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.External.HttpTypes">
            <summary>
            区域状态
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.External.HttpTypes.HTTPS">
            <summary>
            Https安全协议网络请求
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.External.HttpTypes.HTTP">
            <summary>
            Http标准
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.FansType">
            <summary>
            粉丝类型
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.FansType.白名单">
            <summary>
            白名单
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.FansType.访客">
            <summary>
            访客
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.FansType.陌生人">
            <summary>
            陌生人
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.FansType.黑名单">
            <summary>
            陌生人
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.FeedbackHandlerType">
            <summary>
            设备处理类型
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.FeedbackHandlerType.Register">
            <summary>
            注册
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.FeedbackHandlerType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.FeedbackHandlerType.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.FeedbackType">
            <summary>
            设备反馈类型
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.FeedbackType.人员删除成功">
            <summary>
            人员删除成功
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.FeedbackType.人员删除失败">
            <summary>
            人员删除失败
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.FeedbackType.人员下发成功">
            <summary>
            人员下发成功
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.FeedbackType.人员下发失败">
            <summary>
            人员下发失败
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.GenderType">
            <summary>
            性别,  1：男 2：女
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.IColorProvider">
            <summary>
            定义枚举颜色接口
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Enums.IColorProvider.GetColor(System.Int32)">
            <summary>
            获取枚举值对应颜色
            </summary>
            <param name="enummer">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Enums.IColorProvider.GetColor(System.Enum)">
            <summary>
            获取项对应颜色
            </summary>
            <param name="source">枚举项</param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Enums.ImageType">
            <summary>
            图片类型
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ImageType.Default">
            <summary>
            默认类型
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ImageType.Original">
            <summary>
            原图
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.ImageType.WateRmark">
            <summary>
            水印图
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.LoginResult">
            <summary>
            登录状态
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.LoginResult.Success">
            <summary>
            登录成功
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.LoginResult.NoUser">
            <summary>
            用户不存在
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.LoginResult.WrongPwd">
            <summary>
            密码错误
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.LoginResult.WrongVerify">
            <summary>
            验证码错误
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.LoginResult.Frozen">
            <summary>
            账号被冻结
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.MediatorHandlerType">
             <summary>
            处理类型
             </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.MediatorHandlerType.Record">
            <summary>
            record
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.MediatorHandlerType.Heartbeat">
            <summary>
            heartbeat
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.MediatorHandlerType.Feedback">
            <summary>
            feedback
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.NotifyType">
            <summary>
            通知类型
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.NotifyType.系统消息">
            <summary>
            系统消息
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.NotifyType.应用消息">
            <summary>
            应用消息
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.OperationState">
            <summary>
            操作状态,  0：正常 1：操作 2：离开 3：违章 4：其他
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.OrganizationType">
            <summary>
            机构类型
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.OrganizationType.Post">
            <summary>
            岗位
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.OrganizationType.Department">
            <summary>
            部门
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.OrganizationType.Company">
            <summary>
            公司
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.OrganizationType.City">
            <summary>
            城市
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.OrganizationType.Group">
            <summary>
            集团
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.PlanStatus">
            <summary>
            计划状态
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.PlanStatus.未开始">
            <summary>
            未开始
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.PlanStatus.进行中">
            <summary>
            进行中
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.PlanStatus.已存档">
            <summary>
            已存档
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.PoliticsType">
            <summary>
            政治面貌
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.PoliticsType.群众">
            <summary>
            群众
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.PoliticsType.共青团员">
            <summary>
            共青团员
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.PoliticsType.中共预备党员">
            <summary>
            中共预备党员
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.PoliticsType.中共党员">
            <summary>
            中共党员
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.PunchType">
            <summary>
            考勤类型  1：人脸考勤 2：指纹考勤 3：虹膜考勤 4：IC卡识别 5：视频识别 6：ID卡识别
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.RegType">
            <summary>
            注册类型  1：采集劳务人员 2：采集岗位人员 3：人脸采集
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.SecureSourceType">
            <summary>
            安全策略数据源类型
            None = 0
            Role=10
            Company=20
            Department=30
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.SecureSourceType.None">
            <summary>
            未设置
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.SecureSourceType.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.SecureSourceType.Company">
            <summary>
            公司
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.SecureSourceType.Department">
            <summary>
            部门
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.SecureValidateType">
            <summary>
            安全策略验证类型
            None = 0
            Ip=10
            ClientOs = 20
            Browser=30
            DeviceId = 40
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.SecureValidateType.None">
            <summary>
            未设置None 默认不验证
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.SecureValidateType.Ip">
            <summary>
            验证Ip
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.SecureValidateType.ClientOs">
            <summary>
            客户端操作系统ClientOs
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.SecureValidateType.Browser">
            <summary>
            客户端浏览器Browser
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.SecureValidateType.DeviceId">
            <summary>
            信任设备DeviceId
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.Sex.Male">
            <summary>
            男
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.Sex.Female">
            <summary>
            女
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.SourceOrTargetType">
            <summary>
            源/目标类型
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.SourceOrTargetType.None">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.SourceOrTargetType.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.SourceOrTargetType.Staff">
            <summary>
            员工
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.SourceOrTargetType.Company">
            <summary>
            企业
            </summary> 
        </member>
        <member name="F:Parakeet.NetCore.Enums.SourceOrTargetType.Project">
            <summary>
            项目
            </summary> 
        </member>
        <member name="F:Parakeet.NetCore.Enums.SourceOrTargetType.ProjectStaff">
            <summary>
            项目员工
            </summary> 
        </member>
        <member name="F:Parakeet.NetCore.Enums.SourceOrTargetType.ProjectCompany">
            <summary>
            项目公司
            </summary> 
        </member>
        <member name="F:Parakeet.NetCore.Enums.SourceOrTargetType.Department">
            <summary>
            部门
            </summary> 
        </member>
        <member name="F:Parakeet.NetCore.Enums.SourceOrTargetType.ApplyUser">
            <summary>
            申请中的用户
            </summary> 
        </member>
        <member name="F:Parakeet.NetCore.Enums.SourceOrTargetType.ApplyStaff">
            <summary>
            申请中的员工
            </summary> 
        </member>
        <member name="F:Parakeet.NetCore.Enums.SourceOrTargetType.Application">
            <summary>
            申请/审批流程
            </summary> 
        </member>
        <member name="T:Parakeet.NetCore.Enums.SqlConnectionType">
            <summary>
            读/写
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.StaffType">
            <summary>
            注册类型  1：劳务人员 2：管理人员
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.HandlerStatus">
            <summary>
            处理状态
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.HandlerStatus.Break">
            <summary>
            中断
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.HandlerStatus.Continue">
            <summary>
            继续
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.HandlerStatus.Normal">
            <summary>
            正常
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.TransportProtocolType">
            <summary>
            转发类型 0:HTTP 10:TCP 20:UDP 30:SerialPort
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TransportProtocolType.HTTP">
            <summary>
            HTTP
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TransportProtocolType.TCP">
            <summary>
            TCP
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TransportProtocolType.UDP">
            <summary>
            UDP
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TransportProtocolType.SerialPort">
            <summary>
            SerialPort
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.TreeNodeLevel">
            <summary>
            TreeNode层级
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeLevel.根级">
            <summary>
            根级
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeLevel.一级">
            <summary>
            一级
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeLevel.二级">
            <summary>
            二级
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeLevel.三级">
            <summary>
            三级
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeLevel.四级">
            <summary>
            四级
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeLevel.五级">
            <summary>
            五级
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeLevel.六级">
            <summary>
            六级
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeLevel.七级">
            <summary>
            七级
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeLevel.八级">
            <summary>
            八级
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeLevel.九级">
            <summary>
            九级
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeLevel.十级">
            <summary>
            十级
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.TreeNodeType">
            <summary>
                构造tree目录数据类型
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.目录">
            <summary>
                目录、普通目录、汇总目录、特殊目录
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.验收记录">
            <summary>
                汇总:验收记录
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.单位工程">
            <summary>
                汇总:单位工程
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.汇总表格">
            <summary>
                汇总:汇总表格
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.构造目录">
            <summary>
                汇总:构造目录 如汇总的分部子分部分项等节点
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.目录表格">
            <summary>
                目录表格
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.模板">
            <summary>
                模板
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.模板文件">
            <summary>
                模板文件
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.表格单位工程">
            <summary>
                表格单位工程
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.模板表格">
            <summary>
                模板表格
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.模板范例表格">
            <summary>
                模板范例表格
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.原始记录表">
            <summary>
                原始记录表
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.报验表">
            <summary>
                报验表
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.项目">
            <summary>
                项目
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.项目信息">
            <summary>
                项目信息
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.项目参建单位">
            <summary>
                项目参建单位
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.项目单位工程">
            <summary>
                项目单位工程
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.项目单位工程信息">
            <summary>
                项目单位工程信息
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.TreeNodeType.项目单位工程参建单位">
            <summary>
                单位工程参建单位
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.UserStatus">
            <summary>
            用户状态(激活/禁用)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.UserStatus.Active">
            <summary>
            激活
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.UserStatus.Disable">
            <summary>
            禁用
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.UserStatus.Locking">
            <summary>
            封号/锁定
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.UserType">
            <summary>
            用户类型
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.UserType.President">
            <summary>
            董事
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.UserType.Manager">
            <summary>
            经理
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.UserType.Financial">
            <summary>
            财务
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.UserType.Partner">
            <summary>
            合伙人
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.UserType.Principal">
            <summary>
            校长
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.UserType.Headmaster">
            <summary>
            班主任
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.UserType.SeniorStudent">
            <summary>
            高级学员
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.UserType.IntermediateStudent">
            <summary>
            中级学员
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.UserType.JuniorStudent">
            <summary>
            初级学员
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.VersionType">
            <summary>
            版本 V1 V2 V3
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.VersionType.V1">
            <summary>
            版本1
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.VersionType.V2">
            <summary>
            版本2
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.VersionType.V3">
            <summary>
            版本3
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.WatermarkPosition">
            <summary>
                枚举: 水印位置
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WatermarkPosition.LeftTop">
            <summary>
                左上
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WatermarkPosition.Left">
            <summary>
                左中
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WatermarkPosition.LeftBottom">
            <summary>
                左下
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WatermarkPosition.Top">
            <summary>
                正上
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WatermarkPosition.Center">
            <summary>
                正中
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WatermarkPosition.Bottom">
            <summary>
                正下
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WatermarkPosition.RightTop">
            <summary>
                右上
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WatermarkPosition.RightCenter">
            <summary>
                右中
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WatermarkPosition.RigthBottom">
            <summary>
                右下
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WatermarkPosition.Cover">
            <summary>
                全屏
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.WaterMarkType">
            <summary>
            水印的类型
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WaterMarkType.TextMark">
            <summary>
            文字水印
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WaterMarkType.ImageMark">
            <summary>
            图片水印
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.LaborType">
            <summary>
            工种
            杂工 = 0,
            点工 = 10,
            架子 = 20,
            绿化 = 90
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.LaborType.杂工">
            <summary>
            杂工
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.LaborType.点工">
            <summary>
            点工
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.LaborType.架子">
            <summary>
            架子
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.LaborType.绿化">
            <summary>
            绿化
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Enums.WorkType">
            <summary>
            投入性质
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WorkType.开发">
            <summary>
            开发
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WorkType.测试">
            <summary>
            测试
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WorkType.变更">
            <summary>
            变更
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Enums.WorkType.设计">
            <summary>
            设计
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Extensions.BinaryExtensions">
            <summary>
            二进制扩展
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.BinaryExtensions.ToHexString(System.Byte[],System.Boolean)">
            <summary>
            2进制转16进制输出
            </summary>
            <param name="bits"></param>
            <param name="withSpace"></param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Extensions.CacheExtensions">
             <summary>
             缓存注册配置扩展
            nosql:not only sql 不仅仅是sql语句，有各自操作的api
            redis:remote dictionary server 远程字典服务器  开源的服务(freeBSD)
            string hash list set zset bitmaps hyperloglss streams 八大数据结构
            方便扩展，大数据高并发，八大数据结构，分布式存储
            单线程原子性：一个任务一个人做。（redis单线程不代表整个redis服务中只有一个线程）
            单线程多进程pk多线程：
            单线程多进程：一个任务有好多个人去做(启动多个redis实例如6379，6380两个端口启动redis)，
            多线程：有一个人去指导这些人去合理安排的的干,多线程要实现原子性，涉及到各种锁，上下文的切换性能的消耗
            典型单线程多进程服务:nginx
            io多路复用/异步
            多路复用：打个单子，然后把单子给后厨，然后你稍等，菜做完了喊你，你来拿
            异步：打个单子，让你留下自己的地址，然后把单子给后厨，菜做完了，直接送达地址
             </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.CacheExtensions.AddCsRedisCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            添加RedisCache 缓存
            </summary>
            <param name="services"></param>
            <param name="redisConnectionString"></param>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.CacheExtensions.AddServiceStackRedisCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            添加ServiceStack 缓存
            </summary>
            <param name="services"></param>
            <param name="redisConnectionString"></param>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.CacheExtensions.AddStackExchangeRedisCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            添加RedisCache 缓存
            </summary>
            <param name="services"></param>
            <param name="redisConnectionString"></param>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.CacheExtensions.ConfigAbpDistributeCacheOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            配置分布式缓存Options 也可以在配置文件中设置
            </summary>
            <param name="services"></param>
            <param name="redisConnectionString"></param>
        </member>
        <member name="T:Parakeet.NetCore.Extensions.ChinesePinyinExtension">
            <summary>
            汉语转拼音
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.ChinesePinyinExtension.ConvertToAllSpell(System.String)">
            <summary>
            汉字转全拼
            </summary>
            <param name="strChinese"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.ChinesePinyinExtension.GetFirstSpell(System.String)">
            <summary>
            汉字转首字母
            </summary>
            <param name="strChinese"></param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Extensions.DateTimeExtensions">
            <summary>
            日期扩展函数
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.TextForDate(System.DateTime,System.String)">
            <summary>
            格式化时间为字符串格式
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.ToTime(System.DateTime)">
            <summary>
            获取该日期中的时间部分 HH:mm:ss.ttt
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.SetStartDate(System.DateTime)">
            <summary>
            设置开始日期
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.SetEndDate(System.Nullable{System.DateTime})">
            <summary>
            设置结束日期
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.SkipDhms(System.DateTime)">
            <summary>
            取年月1号
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.SkipDhms(System.Nullable{System.DateTime})">
            <summary>
            取年月和1号
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.SkipHms(System.DateTime)">
            <summary>
            取年月日，忽略时分秒
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.GetMonthFromCurrentToTargetTime(System.DateTime,System.DateTime)">
            <summary>
             计算当前时间与目标时间的月份差距
            </summary>
            <param name="current">当前时间</param>
            <param name="target">目标时间</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.GetDeltaMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取日期间(不含本月)月份实际相差月数
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.GetDeltaDateCycle(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取日期间(包含本月)实际相差月数
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.CenturyPastDays(System.DateTime)">
            <summary>
            21世纪到当前过了多少天
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.ToUnixTimestamp(System.DateTime)">
            <summary>
            返回10位时间戳 Timestamp
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.GetUnixTime">
            <summary>
            获取Unix时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.ToUnixTimeTicks(System.DateTime,System.Int32)">
            <summary>
            返回时间戳 Timestamp (默认10位)
            </summary>
            <param name="target"></param>
            <param name="length"></param>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.GetTimeStamp(System.DateTime)">
            <summary>
            获得13位的时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.DateTimeExtensions.ToUnixInt(System.DateTime)">
            <summary>  
            将c# DateTime时间格式转换为Unix时间戳格式  
            </summary>  
            <param name="time">时间</param>  
            <returns>long</returns>  
        </member>
        <member name="T:Parakeet.NetCore.Extensions.EnumExtensions">
            <summary>
                枚举类型扩展
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.EnumExtensions.ToInt(System.Enum)">
            <summary>
                枚举转int类型
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.EnumExtensions.ToEnum``1(System.Int32)">
            <summary>
                int类型转枚举
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.EnumExtensions.IsDefined(System.Enum)">
            <summary>
                当前枚举值是否在枚举中被定义
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.EnumExtensions.DisplayName(System.Enum)">
            <summary>
                获得枚举使用<see cref="T:System.ComponentModel.DescriptionAttribute" />或<see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute" />或<see cref="T:System.ComponentModel.DisplayNameAttribute" />
                修饰的显示名称
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.EnumExtensions.CreateColorProvider(System.Type)">
            <summary>
            根据Type创建枚举 ColorProvider
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.EnumExtensions.ColorProvider(System.Enum)">
            <summary>
            根据枚举类型 创建枚举 ColorProvider
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.EnumExtensions.GetColorTranslator(System.Enum)">
            <summary>
            获取枚举值对应html颜色字符串 供前端使用
            </summary>
            <param name="source">枚举值</param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Extensions.GuidExtensions">
            <summary>
            guid扩展
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.GuidExtensions.ToInt64">
            <summary>
            根据Guid获取唯一数字序列(二进制数组就是唯一的转为long即可)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Extensions.JsonSerializerExtensions">
            <summary>
            System.Text.Json 的Json序列化
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Extensions.NumberExtensions">
            <summary>
            数字类型静态扩展
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.ToChineseString(System.String)">
            第一种方法：将小写金额转换成大写金额
            用正则表达式
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.ToChineseString(System.Nullable{System.Decimal})">
            <summary>
            金额转中文
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.ToChineseString(System.Decimal)">
            <summary>
            金额转中文
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.ToChineseBigMoney(System.String)">
            <summary>
            数字金额转中文大写
            </summary>
            <param name="money"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.ToChineseMoney(System.String)">
            <summary>
            数字字符串转人名币大写 待测试
            </summary>
            <param name="money"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.ToChineseBigAmount(System.Int32)">
            <summary>
            整数转中文大写 待测试
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.ToChineseBigString(System.Decimal)">
            <summary>
            decimal转中文大写 待测试
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.ToDouble(System.String)">
            <summary>
            中文大写转double数字
            </summary>
            <param name="chineseStr">中文大写字符串</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.In``1(``0,``0,``0)">
            <summary>
            source是否在min和max中，包含min和max。min&gt;=source&lt;=max
            </summary>
            <typeparam name="T">值类型或实现了IComparable接口的成员</typeparam>
            <param name="source"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.ToLocalDateTime(System.Int32)">
            <summary>
            将10位时间戳Timestamp转换成日期
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.ToLocalDateTime(System.Int64)">
            <summary>
            将10位时间戳Timestamp转换成日期
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.GetUnixTimeTicks(System.Nullable{System.Int64})">
            <summary>
            获取Unix时间（精确到秒）
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.FromUnix(System.Int64)">
            <summary>
            Unix时间转换为正常时间
            </summary>
            <param name="unixTime">Unix时间 10位</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.FromUnixMillonSeconds(System.Int64)">
            <summary>
            Unix时间转换为正常时间
            </summary>
            <param name="unixTime">Unix时间 13位</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.ReverseStack``1(System.Collections.Generic.Stack{``0})">
            <summary>
            复制堆栈(先进后出)
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="stack">堆栈</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.NumberExtensions.GenerateRandomString(System.Int32)">
            <summary>  
            该方法用于生成指定位数的随机数  静态方法(非静态扩展)
            </summary>  
            <param name="codeNum">参数是随机数的位数</param>  
            <returns>返回一个随机数字符串</returns>  
        </member>
        <member name="T:Parakeet.NetCore.Extensions.ObjectExtensions">
            <summary>
            对象扩展
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.ObjectExtensions.ToXml(System.Object,System.Text.Encoding,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            对象转xml格式数据
            </summary>
            <param name="obj"></param>
            <param name="encoding">编码格式</param>
            <param name="omitXmlDeclaration">是否去除xml的声明</param>
            <param name="omitNameSpaces">是否忽略命名空间</param>
            <param name="indent">是否缩进元素</param>
            <param name="indentChars">缩进格式化字符</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.ObjectExtensions.ToJson(System.Object)">
            <summary>
            对象转json格式数据
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.ObjectExtensions.ToJson(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            对象转json格式数据
            </summary>
            <param name="obj"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.ObjectExtensions.ToJson``1(System.Object)">
            <summary>
            对象转json格式数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.ObjectExtensions.ToJson``1(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            对象转json格式数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Extensions.ServiceCollectionExtensions">
            <summary>
            容器扩展：根据节点 注册单例类
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.ServiceCollectionExtensions.ConfigureModuleServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            配置自定义模块 StartUp中的ConfigureServices  向容器中注册服务
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Parakeet.NetCore.Extensions.ServiceProviderExtensions">
            <summary>
            向容器中获取注册接口或类的实例
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.ServiceProviderExtensions.Resolve``1(System.IServiceProvider)">
            <summary>
            GetRequiredService-->Resolve
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.ServiceProviderExtensions.Resolve``1(System.IServiceProvider,System.String)">
            <summary>
            一个接口注册了多个实现，通过HandlerType来获取唯一实现类
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider"></param>
            <param name="handlerType"></param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Extensions.StringExtensions">
            <summary>
                字符串静态扩展类
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.HasValue(System.String)">
            <summary>Check that a string is not null or empty</summary>
            <param name="input">String to check</param>
            <returns>bool</returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.FormatEx(System.String,System.Object[])">
            <summary>
            format扩展
            </summary>
            <param name="source"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ContainsEx(System.String,System.String)">
            <summary>
            contains扩展
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToInt(System.String,System.Int32)">
            <summary>
            转换为整数
            </summary>
            <param name="source"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToInt64(System.String,System.Int64)">
            <summary>
            转换为long整数
            </summary>
            <param name="source"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToDecimal(System.String,System.Decimal)">
            <summary>
            转换为decimal类型
            </summary>
            <param name="source"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToJson``1(System.String)">
            <summary>
                json格式数据转对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToJson``1(System.String,System.Type)">
            <summary>
                json格式数据转对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToDateTime(System.String)">
            <summary>
                转<see cref="T:System.DateTime" />对象
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToDbDateTime(System.String)">
            <summary>
                转<see cref="T:System.DateTime" />对象，如果时间小于1970/1/1则返回null
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToEnum``1(System.String)">
            <summary>
                转枚举对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToXml``1(System.String,System.Text.Encoding)">
            <summary>
            xml格式数据转对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToSbc(System.String)">
            <summary>
            转化为半角字符串
            </summary>
            <param name="input">要转化的字符串</param>
            <returns>半角字符串</returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToDbc(System.String)">
            <summary>
            转化为全角字符串
            </summary>
            <param name="input">要转化的字符串</param>
            <returns>全角字符串</returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.RemoveLastChar(System.String,System.Char)">
            <summary>
            字符串删除最后一个规定字符
            </summary>
            <param name="str">字符串</param>
            <param name="removeChar">最后要移除的字符</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToInitialCapitalization(System.String)">
            <summary>
            保证字符串的首字母大写
            Uppercase first letters of all words in the string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToCamelCase(System.String)">
            <summary>
            首字母小写 驼峰命名规则
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToHtmlId(System.String)">
            <summary>
            实体名转换为前端html标签id格式BaseEntity(-base-enity)
            将大写字母转换为'-小写字母格式'
            返回模块名+实体组成的htmlid格式字符串： name-base-entity 
            </summary>
            <param name="htmlId">传入的大小写单词字符串</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.HideTel(System.String)">
            <summary>
            隐藏11位手机号的中间4位
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.ToBase64(System.String,System.Text.Encoding)">
            <summary>
            转base64格式数据
            </summary>
            <param name="source"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.SetRegExpression(System.String)">
            <summary>
            规范正则rule
            </summary>
            <param name="rule">正则表达式 不为null 传入正则表达式要求要么都带^$，要么都不带^$</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.KeepBase64ImagePrefix(System.String,System.String)">
            <summary>
                给base64图片加上默认(自定义)前缀png
            </summary>
            <param name="str"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.RemoveBase64ImagePrefix(System.String)">
            <summary>
                去base64图片前缀
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.UrlEncode(System.String)">
            <summary>
                Base64图片UrlEncode编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.StringExtensions.IpToNumber(System.String)">
            <summary>
            计算ip的数值
            </summary>
            <param name="ipStr"></param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Extensions.TextJsonConvert">
            <summary>
            System.Text.Json 序列化
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Extensions.TypeExtensions">
            <summary>
            关于类型的扩展
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Extensions.TypeExtensions.IsImplementedBaseType(System.Type,System.Type)">
            <summary>
            是否某个父(泛型)类型的子类
            </summary>
            <param name="type"></param>
            <param name="generic"></param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.FormulaGrammars.GeneralFormulaAnalyzer">
            <summary>
            常用公式解析 This class can do some simple analysis on the trees produced by the parser.
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.FormulaGrammars.GeneralFormulaAnalyzer.AllNodes">
            <summary>
            Lazy cached version of all nodes
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaAnalyzer.#ctor(Irony.Parsing.ParseTreeNode)">
            <summary>
            Provide formula analysis functions on a tree
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaAnalyzer.#ctor(System.String)">
            <summary>
            公式解析 Provide formula analysis functions
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaAnalyzer.References">
            <summary>
            获取所有单引用节点 Get all references that aren't part of another reference expression
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaAnalyzer.Constants">
            <summary>
            常量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaAnalyzer.Numbers">
            <summary>
             返回此公式中使用的所有常量 Return all constant numbers used in this formula
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaAnalyzer.Depth">
            <summary>
            返回解析树的深度、嵌套公式的数量 Return the depth of the parse tree, the number of nested Formulas
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaAnalyzer.Depth(Irony.Parsing.ParseTreeNode)">
            <summary>
            嵌套公式的深度 Depth of nested formulas
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaAnalyzer.OperatorDepth(System.Collections.Generic.ISet{System.String})">
            <summary>
            获取函数/运算符深度 Get function/operator depth
            </summary>
            <param name="operators">If not null, count only specific functions/operators</param>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaAnalyzer.ConditionalComplexity">
            <summary>
            获取公式的条件复杂性 Get the conditional complexity of the formula
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaAnalyzer.ParserReferences">
            <summary>
            获取公式中包含的所有引用 Get all references included in the formula
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar">
            <summary>
            常规公式语法
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.DateFunctionToken">
            <summary>
            Date(year, month, day)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.DateValueFunctionToken">
            <summary>
            DateValue(DateTime) 或者 DateValue(DateTime, Timezone)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.DayFunctionToken">
            <summary>
            Day(date)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.DaysFunctionToken">
            <summary>
            Days(number)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.HourFunctionToken">
            <summary>
            Hour(dateTime)或者Hour()
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.TotalHoursFunctionToken">
            <summary>
            TotalHours(interval)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.MinuteFunctionToken">
            <summary>
            Minute(DateTime) or Minute()
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.MonthFunctionToken">
            <summary>
            Month(date), Month(DateTime)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.MonthsFunctionToken">
            <summary>
            Months(number)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.NetWorkdaysFunctionToken">
            <summary>
            NetWorkdays(start_date/datetime, number_of_days, weekend_number, holiday_schedule)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.NowWorkdaysFunctionToken">
            <summary>
            Now()
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.SecondFunctionToken">
            <summary>
            Second(date), Second()
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.StartOfDayFunctionToken">
            <summary>
            StartOfDay(date, timezone)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.TimeFunctionToken">
            <summary>
            Time(hour, minute, second)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.TodayFunctionToken">
            <summary>
            Today(), Today(timezone)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.WeekdayFunctionToken">
            <summary>
            Weekday(date), Weekday(datetime)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.YearFunctionToken">
            <summary>
            Year(date)或者Year(DateTime)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.YearsFunctionToken">
            <summary>
            Years(number)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.AbsFunctionToken">
            <summary>
            Abs(number)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.AverageFunctionToken">
            <summary>
            Average(number1, number2, ...)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.CeilingFunctionToken">
            <summary>
            Ceiling(number)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.FloorFunctionToken">
            <summary>
            Floor(number)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.MaxFunctionToken">
            <summary>
            Max(value1, value2, …)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.MinFunctionToken">
            <summary>
            Min(value1, value2, …)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.PowerFunctionToken">
            <summary>
            Power(number, number)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.RoundFunctionToken">
            <summary>
            Round(number, number) Round(number, number_of_digits, 'significant') OR Round(number, number_of_digits, 'significant-astm')
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.SqrtFunctionToken">
            <summary>
            Sqrt(number)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.SumFunctionToken">
            <summary>
            Sum(number1, number2, ...)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.ValueFunctionToken">
            <summary>
            Value(text)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.AndFunctionToken">
            <summary>
            And(expression1, expression2, …)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.CaseFunctionToken">
            <summary>
            Case(expression1, value1, result1, value2, result2, else_result)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.IfFunctionToken">
            <summary>
            If(expression, value_if_true, value_if_false)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.IncludesFunctionToken">
            <summary>
            Includes(multi-value picklist, string) 或者Includes(multi-value picklist, single-value picklist)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.IsBlankFunctionToken">
            <summary>
            IsBlank(expression)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.IsNumberFunctionToken">
            <summary>
            IsNumber(text)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.NotFunctionToken">
            <summary>
            Not(expression)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.OrFunctionToken">
            <summary>
            (expression1) || (expression2)注意：用户可以使用 || 运算符代替 Or()
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.ConcatFunctionToken" -->
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.FindFunctionToken">
            <summary>
            Find(find_text, within_text)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.LeftFunctionToken">
            <summary>
            Left(text, position)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.LengthFunctionToken">
            <summary>
            Length(text)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.LowerFunctionToken">
            <summary>
            Lower(text)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.MiddleFunctionToken">
            <summary>
            Middle(text, start_position, end_position)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.RightFunctionToken">
            <summary>
            Right(text, number)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.SubstituteFunctionToken">
            <summary>
            Substitute(text, old_text, new_text)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.TextFunctionToken">
            <summary>
            Text(value, 'format') 或者Text(lifecycle_state/picklist_value/number)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.TrimFunctionToken">
            <summary>
            Trim(text)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.UpperFunctionToken">
            <summary>
            Upper(text)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.HyperlinkFunctionToken">
            <summary>
            Hyperlink(href, label, target, connection)
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.RecordByLabelFunctionToken">
            <summary>
            RecordByLabel() RecordByLabel (“Cholecap”) 返回Cholecap产品的对象引用
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.StateFunctionToken">
            <summary>
            state__v
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.UrlEncodeFunctionToken">
            <summary>
            UrlEncode(text)
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.FormulaGrammars.GeneralFormulaGrammar.Field">
            <summary>
            自定义Field非终结点类型(含自定义FieldName规则)
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser">
            <summary>
             公式解析为语法树
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser._p">
            <summary>
            线程唯一解析实例 Thread-local singleton parser instance
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.P">
            <summary>
            线程安全解析器 Thread-safe parser
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.Parse(System.String)">
            <summary>
            解析公式，返回树节点(Parse a formula, return the the tree's root node)
            </summary>
            <param name="input">待解析公式字符串</param>
            <exception cref="T:System.ArgumentException"> 如果不能被解析报参数错误 </exception>
            <returns>返回树根节点</returns>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.ParseToTree(System.String)">
            <summary>
            解析公式字符串返回语法树
            </summary>
            <param name="input">待解析公式字符串</param>
            <exception cref="T:System.ArgumentException">If formula could not be parsed</exception>
            <returns>语法树</returns>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.AllNodesConditional(Irony.Parsing.ParseTreeNode,System.Predicate{Irony.Parsing.ParseTreeNode})">
            <summary>
            Non-terminal nodes in depth-first pre-order, with a conditional stop
            </summary>
            <param name="root">The root node</param>
            <param name="stopAt">Don't process the children of a node matching this predicate</param>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.AllNodes(Irony.Parsing.ParseTreeNode)">
            <summary>
            所有非终结点按深度优先排序 All non-terminal nodes in depth-first pre-order
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.AllNodes(Irony.Parsing.ParseTreeNode,System.String)">
            <summary>
            所有确定类型的非终结点按深度优先排序 All non-terminal nodes of a certain type in depth-first pre-order
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.Parent(Irony.Parsing.ParseTreeNode,Irony.Parsing.ParseTreeNode)">
            <summary>
            获取节点的父节点 Get the parent node of a node
            </summary>
            <remarks>
            耗资源的操作，搜索整棵树 This is an expensive operation, as the whole tree will be searched through
            </remarks>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.Type(Irony.Parsing.ParseTreeNode)">
            <summary>
            获取节点类型名称 The node type/name
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.Is(Irony.Parsing.ParseTreeNode,System.String)">
            <summary>
            判断节点类型是否指定类型 Check if a node is of a particular type
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.IsFunction(Irony.Parsing.ParseTreeNode)">
            <summary>
            检查节点是否是函数调用 Checks whether this node is a function
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.IsParentheses(Irony.Parsing.ParseTreeNode)">
            <summary>
            是否包有小括号 Whether or not this node represents parentheses "(_)"
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.IsBinaryOperation(Irony.Parsing.ParseTreeNode)">
            <summary>
            检查是否二元操作
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.IsBinaryNonReferenceOperation(Irony.Parsing.ParseTreeNode)">
            <summary>
            检查是否二元非引用操作
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.IsBinaryReferenceOperation(Irony.Parsing.ParseTreeNode)">
            <summary>
            检查是否二元引用操作
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.IsUnaryOperation(Irony.Parsing.ParseTreeNode)">
            <summary>
            是否一元操作
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.IsUnaryPrefixOperation(Irony.Parsing.ParseTreeNode)">
            <summary>
            是否一元预操作
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.IsUnaryPostfixOperation(Irony.Parsing.ParseTreeNode)">
            <summary>
            是否一元后操作
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.RemoveFinalSymbol(System.String)">
            <summary>
            是否移除最后一个标志字符
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.GetFunction(Irony.Parsing.ParseTreeNode)">
            <summary>
            获取函数名称 Get the function or operator name of this function call
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.MatchFunction(Irony.Parsing.ParseTreeNode,System.String)">
            <summary>
            检查节点是否指定函数名节点 Check if this node is a specific function
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.GetFunctionArguments(Irony.Parsing.ParseTreeNode)">
            <summary>
            获取节点函数所有参数和操作 Get all the arguments of a function or operation
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.IsBuiltinFunction(Irony.Parsing.ParseTreeNode)">
            <summary>
            检查是否节点来源于阿克索内置函数 Checks whether this node is a built-in akso function
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.IsIntersection(Irony.Parsing.ParseTreeNode)">
            <summary>
            是否交叉节点 Whether or not this node represents an intersection
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.IsUnion(Irony.Parsing.ParseTreeNode)">
            <summary>
            是否合并节点 Whether or not this node represents an union
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.IsNamedFunction(Irony.Parsing.ParseTreeNode)">
            <summary>
            检查是否1,2元函数调用节点 Checks whether this node is a function call with name, and not just a unary or binary operation
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.IsExternalUDFunction(Irony.Parsing.ParseTreeNode)">
            <summary>
            是否外部自定义函数节点
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.IsNumberWithSign(Irony.Parsing.ParseTreeNode)">
            <summary>
            是否带符号数字常量 True if this node presents a number constant with a sign
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.SkipFormula(Irony.Parsing.ParseTreeNode)">
            <summary>
            Go to the first non-formula child node
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.GetReferenceNodes(Irony.Parsing.ParseTreeNode)">
            <summary>
            获取作为引用且不属于另一个引用表达式的所有子节点
            Get all child nodes that are references and aren't part of another reference expression
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.GetParserReferences(Irony.Parsing.ParseTreeNode)">
            <summary>
            Gets the ParserReferences from the input parse tree node and its children
            </summary>
            <remarks>
            5 cases:
            1. ReferenceItem node: convert to ParserReference
            2. Reference node (Prefix ReferenceItem): convert to ParserReference, recursive call on the nodes returned from GetReferenceNodes(node)
                (to include the references in the arguments of external UDFs)
            5. Other cases (RefFunctionCall, Union, Arguments):recursive call on the nodes returned from GetReferenceNodes(node)
            </remarks>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.SkipToRelevant(Irony.Parsing.ParseTreeNode,System.Boolean)">
            <summary>
            Go to the first "relevant" child node, i.e. skips wrapper nodes
            </summary>
            <param name="input">The input parse tree node</param>
            <param name="skipReferencesWithoutPrefix">If true, skip all reference nodes without a prefix instead of only parentheses</param>
            <remarks>
            Skips:
            * FormulaWithEq and ArrayFormula nodes
            * Formula nodes
            * Parentheses
            * Reference nodes which are just wrappers
            </remarks>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.GeneralFormulaParser.Print(Irony.Parsing.ParseTreeNode)">
            <summary>
            将解析树打印成字符串 Pretty-print a parse tree to a string
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.FormulaGrammars.GrammarNames">
            <summary>
            常规公式语法常量
            保留这些常量，而不是方法/属性，因为这样可以在switch语句中使用它们
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.FormulaGrammars.ParserReference.InitializeReference(Irony.Parsing.ParseTreeNode)">
            <summary>
                Initializes the current object based on the input ParseTreeNode
            </summary>
            <remarks>
                For Reference nodes (Prefix ReferenceItem), it initialize the values derived from the Prefix node and
                is re-invoked for the ReferenceItem node.
            </remarks>
        </member>
        <member name="T:Parakeet.NetCore.FormulaGrammars.ReferenceType">
            <summary>
            引用类型
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Helper.AssemblyHelper">
            <summary>
            程序集帮助类
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Helper.CaptchaHelper.GenerateCaptchaCode(System.Int32)">
            <summary>
            获取验证码
            </summary>
            <param name="length">验证码长度</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.CaptchaHelper.GenerateCaptchaImage(System.Int32,System.Int32,System.String)">
            <summary>
            生成验证码图片（越宽越高越容易识别）
            </summary>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="captchaCode">验证码</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.CRC16Helper.StringToHexByte(System.String)">
            <summary>
            字符串转16进制字符数组
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.CRC16Helper.StringToHexByte(System.String,System.Boolean)">
            <summary>
            字符串转16进制字符数组
            </summary>
            <param name="str"></param>
            <param name="isFilterChinese">是否过滤掉中文字符</param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Helper.EnvironmentHelper">
            <summary>
            环境变量帮助类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Helper.EnvironmentHelper.DatabaseType">
            <summary>
            数据库类型 1 sqlserver 2 mysql 3 pgsql
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Helper.EnvironmentHelper.DatabaseConnectionString">
            <summary>
            数据库连接地址
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Helper.EnvironmentHelper.CsRedisConfigurationBase">
            <summary>
            csredis数据库连接地址
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Helper.EnvironmentHelper.StackRedisConn">
            <summary>
            StackRedisConn连接地址
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Helper.EnvironmentHelper.EnumAssemblyNames">
            <summary>
            枚举类型所在程序集名 EnumAssemblyNames
            "Parakeet.NetCore.Domain.Shared,Parakeet.NetCore.Application", //枚举类型所在程序集名称,逗号分隔 
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Helper.EnvironmentHelper.DesKey">
            <summary>
            加密解密字符串 "Parakeet.Vip"
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Helper.EnvironmentHelper.RootPath">
            <summary>
            当前程序根目录
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Helper.EnvironmentHelper.GetCsRedisDbConnections">
            <summary>
            获取csRedis 16个db连接集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Helper.ImageHelper">
            <summary>
            ImageHelper 绘制验证码 图片等比/不等比缩放 
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Helper.ImageHelper.CreateVerifyCode(System.String@)">
            <summary>
            创建一个验证码 常用 
            </summary>
            <param name="code">返回code</param>
            <returns>返回bitmap文件</returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.ImageHelper.CompressPercent(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            按比例缩放,图片不会变形，会优先满足原图和最大长宽比例最高的一项
            </summary>
            <param name="oldPath"></param>
            <param name="newPath"></param>
            <param name="maxWidth"></param>
            <param name="maxHeight"></param>
        </member>
        <member name="M:Parakeet.NetCore.Helper.ImageHelper.ImageChangeBySize(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            按照指定大小对图片进行缩放，可能会图片变形
            </summary>
            <param name="oldPath"></param>
            <param name="newPath"></param>
            <param name="newWidth"></param>
            <param name="newHeight"></param>
        </member>
        <member name="M:Parakeet.NetCore.Helper.ImageHelper.ResizeImage(System.DrawingCore.Image,System.DrawingCore.Size)">
            <summary>
            等比压缩图片，返回固定大小并居中
            </summary>
            <param name="mg"></param>
            <param name="newSize"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.ImageHelper.AddWaterMarkAsync(System.String,Parakeet.NetCore.Enums.WaterMarkType,System.String,Parakeet.NetCore.Enums.WatermarkPosition,System.Single)">
            <summary>
                添加水印(分图片水印与文字水印两种)
            </summary>
            <param name="base64String">原图片base64string</param>
            <param name="wmtType">要添加的水印的类型</param>
            <param name="sWaterMarkContent">
                水印内容，若添加文字水印，此即为要添加的文字；
                若要添加图片水印，此为水印图片的base64String
            </param>
            <param name="position"></param>
            <param name="transparence"></param>
        </member>
        <member name="M:Parakeet.NetCore.Helper.ImageHelper.AddWatermark(System.DrawingCore.Image,System.DrawingCore.Image,System.DrawingCore.Point,System.Boolean)">
            <summary>
            在原图上添加满屏水印
            </summary>
            <param name="source"></param>
            <param name="watermark"></param>
            <param name="pos"></param>
            <param name="fill"></param>
        </member>
        <member name="M:Parakeet.NetCore.Helper.ImageHelper.AddWatermarkText(System.DrawingCore.Graphics,System.String,Parakeet.NetCore.Enums.WatermarkPosition,System.Int32,System.Int32,System.Single)">
            <summary>
                加水印文字
            </summary>
            <param name="picture">imge 对象</param>
            <param name="watermarkText">水印文字内容</param>
            <param name="watermarkPosition">水印位置</param>
            <param name="width">被加水印图片的宽</param>
            <param name="height">被加水印图片的高</param>
            <param name="transparence">透明度</param>
        </member>
        <member name="M:Parakeet.NetCore.Helper.ImageHelper.AddWatermarkImage(System.DrawingCore.Graphics,System.DrawingCore.Image,Parakeet.NetCore.Enums.WatermarkPosition,System.Int32,System.Int32,System.Single)">
            <summary>
                加水印图片
            </summary>
            <param name="picture">imge 对象</param>
            <param name="watermark">Image对象（以此图片为水印）</param>
            <param name="watermarkPosition">水印位置</param>
            <param name="width">被加水印图片的宽</param>
            <param name="height">被加水印图片的高</param>
            <param name="transparence">水印透明度</param>
        </member>
        <member name="M:Parakeet.NetCore.Helper.ImageHelper.CreateWatermark(System.DrawingCore.Bitmap,System.DrawingCore.Bitmap,Parakeet.NetCore.Enums.WatermarkPosition,System.Int32)">
            <summary>
                生成: 原图绘制水印的 System.Drawing.Bitmap 对象
            </summary>
            <param name="sBitmap">原图 System.Drawing.Bitmap 对象: System.Drawing.Bitmap</param>
            <param name="wBitmap">水印 System.Drawing.Bitmap 对象: System.Drawing.Bitmap</param>
            <param name="position">
                枚举 Uinatlex.ToolBox.ImageManager.WatermarkPosition :
                Uinatlex.ToolBox.ImageManager.WatermarkPosition
            </param>
            <param name="margin">水印边距: int</param>
            <returns>返回: 原图绘制水印的 System.Drawing.Bitmap 对象 System.Drawing.Bitmap</returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.ImageHelper.GetWatermarkRectangle(Parakeet.NetCore.Enums.WatermarkPosition,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取: 枚举 Uinatlex.ToolBox.ImageManager.WatermarkPosition 对应的 System.Drawing.Rectangle 对象
            </summary>
            <param name="positon">
                枚举 Uinatlex.ToolBox.ImageManager.WatermarkPosition:
                Uinatlex.ToolBox.ImageManager.WatermarkPosition
            </param>
            <param name="oX">原图宽度: int</param>
            <param name="oY">原图高度: int</param>
            <param name="x">水印宽度: int</param>
            <param name="y">水印高度: int</param>
            <param name="i">边距: int</param>
            <returns>
                返回: 枚举 Uinatlex.ToolBox.ImageManager.WatermarkPosition 对应的 System.Drawing.Rectangle 对象:
                System.Drawing.Rectangle
            </returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.ImageHelper.GetBitmapImageFromBase64(System.String)">
            <summary>
            base64转二进制再转Bitmap
            </summary>
            <param name="base64String"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.ImageHelper.GetBase64FromImageAsync(System.DrawingCore.Image)">
            <summary>
            bitmap图片转Base64
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.ImageHelper.GetBase64FromImage(System.String)">
            <summary>
            图片
            </summary>
            <param name="imagefile"></param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Helper.LocalIpHelper">
            <summary>
            获取当前机器的本机ipv4
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Helper.RandomNumberHelper.RandomDecimal(System.Int32,System.Int32,System.Decimal)">
            <summary>
            生成随机decimal数
            </summary>
            <param name="min">种子/最小区间</param>
            <param name="max">最大区间值</param>
            <param name="determinant">系数</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.RandomNumberHelper.RandomInt(System.Int32,System.Int32,System.Int32)">
            <summary>
            生成随机整数
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="determinant">系数</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.RandomNumberHelper.RandomIdCard">
            <summary>
            准备18位身份证号
            </summary>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Helper.ReflectTypeHelper">
            <summary>
            反射类型帮助类
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Helper.ReflectTypeHelper.GetTypeByEsTypeString(System.String)">
            <summary>
            根据类型字符串获取类型 es 数据类型
            核心类型	字符串类型	string,text,keyword	结构化搜索，全文文本搜索、聚合、排序等
            整数类型 integer,long,short,byte 字段的长度越短，索引和搜索的效率越高。
            浮点类型 double,float,half_float,scaled_float
                逻辑类型    boolean
                日期类型    date
                范围类型    range
                二进制类型   binary
                复合类型    数组类型 array
            对象类型 object
                嵌套类型    nested
                地理类型    地理坐标类型 geo_point
            地理地图 geo_shape
            特殊类型 IP类型    ip
                范围类型    completion
                令牌计数类型  token_count
                附件类型    attachment
                抽取类型    percolator
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Helper.SHAHelper">
            <summary>
            SHSA加密Helper(SHA1或SHA256)
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Helper.SHAHelper.SHA1(System.String)">
            <summary>
            SHA1 加密，返回大写字符串
            </summary>
            <param name="content">需要加密字符串</param>
            <returns>返回40位UTF8 大写</returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.SHAHelper.SHA1(System.String,System.Text.Encoding)">
            <summary>
            SHA1 加密，返回大写字符串
            </summary>
            <param name="content">需要加密字符串</param>
            <param name="encode">指定加密编码</param>
            <returns>返回40位大写字符串</returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.SHAHelper.HMACSHA1(System.String,System.String,System.String,System.String)">
            <summary>
            HMACSHA1加密
            </summary>
            <param name="appId">appId</param>
            <param name="appKey">appKey</param>
            <param name="appSecret">appSecret</param>
            <param name="timeStamp">timeStamp</param>
            <returns>加密base64字符串</returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.SHAHelper.HMACSHA1(System.String,System.String,System.String,System.Int64)">
            <summary>
            HMACSHA1加密
            </summary>
            <param name="appId">appId</param>
            <param name="appKey">appKey</param>
            <param name="appSecret">appSecret</param>
            <param name="timeStamp">timeStamp</param>
            <returns>加密base64字符串</returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.SHAHelper.HMACSHA256(System.String,System.String,System.String,System.Int64)">
            <summary>
            HMACSHA256
            </summary>
            <param name="appId"></param>
            <param name="appKey"></param>
            <param name="appSecret"></param>
            <param name="unixTimeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.SHAHelper.HMACSHA256(System.String,System.String,System.String,System.String)">
            <summary>
            HMACSHA256
            </summary>
            <param name="appId"></param>
            <param name="appKey"></param>
            <param name="appSecret"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Helper.SnowflakeIdGenHelper">
            <summary>
            雪花算法生成长整型Id
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Helper.SqlHelper">
            <summary>
            sql帮助类
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Helper.SqlHelper.IsSafeSqlString(System.String)">
            <summary>
            检测是否有Sql危险字符
            </summary>
            <param name="str">要判断字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.SqlHelper.IsValidInput(System.String)">
            <summary>
            检测客户输入的字符串是否有效。
            当检测到客户的输入中有攻击性危险字符串,则返回false,有效返回true。
            </summary>
            <param name="input">要检测的字符串</param>
        </member>
        <member name="M:Parakeet.NetCore.Helper.VerifyCodeHelper.CreateVerifyCode(System.String@)">
            <summary>
            创建一个验证码
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.VerifyCodeHelper.Drawing">
            <summary>
            画验证码 保存路径: 网站根目录/upload/drawings/default.png
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Helper.VerifyCodeHelper.VerificationCode">
            <summary>
             画验证码 保存路径: 网站根目录/upload/drawings/verif.png
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Helper.VerifyCodeHelper.GetBitmapImageFromBase64(System.String)">
            <summary>
            base64转二进制再转Bitmap
            </summary>
            <param name="base64String"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.VerifyCodeHelper.GetBase64FromImageAsync(System.Drawing.Bitmap)">
            <summary>
            bitmap图片转Base64
            </summary>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Helper.VerifyCodeHelper.GetQrCodeImage(System.String)">
            <summary>
            二维码 通过VS中的【NUGET】下载并引用QRCode (QRCoder.dll)
            </summary>
            <param name="url">生成二维码的内容</param>
            <returns>base64String png</returns>
        </member>
        <member name="T:Parakeet.NetCore.Helper.WebContentDirectoryFinder">
            <summary>
            This class is used to find root path of the web project in;
            unit tests (to find views) and entity framework core command line commands (to find conn string).
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Helper.WebRequestHelper.Post(System.String,System.String)">
            <summary>
            使用插件 首先应在es容器里安装对应版本插件
            https://github.com/NLPchina/elasticsearch-sql
            查询时使用/_nlpcn/sql 让插件将sql语句翻译为dcl语法执行
            </summary>
            <param name="queryParam"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Interfaces.ICacheContainer`2">
            <summary>
            缓存容器
            </summary>
            <typeparam name="TMultilevelCache">多级缓存类类型</typeparam>
            <typeparam name="TData">缓存数据类型</typeparam>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.ICacheContainer`2.AddCache(`0)">
            <summary>
            添加多级缓存实例
            </summary>
            <param name="multilevelCache"></param>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.ICacheContainer`2.GetCacheValue(System.String,System.Func{`0})">
            <summary>
            获取缓存值
            </summary>
            <param name="cacheKey"></param>
            <param name="multilevelCache">当缓存key不存在时，尝试添加添加缓存实例</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.ICacheContainer`2.RemoveCache(System.String)">
            <summary>
            根据key移除缓存
            </summary>
            <param name="cacheKey"></param>
        </member>
        <member name="T:Parakeet.NetCore.Interfaces.ICustomModule">
            <summary>
            自定义Module接口
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Interfaces.ICustomModule.Name">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Interfaces.ICustomModule.Area">
            <summary>
            模块所在区域
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Interfaces.ICustomModule.Order">
            <summary>
            模块排序字段
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Interfaces.ICustomStartup">
            <summary>
            自定义启动类接口
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.ICustomStartup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.ICustomStartup.Configure(System.IServiceProvider)">
            <summary>
            配置管道/启动执行顺序
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Interfaces.ICustomStartup.Module">
            <summary>
            启动类所属模块
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Interfaces.ICustomUnitOfWork">
            <summary>
            (原netcore操作单元接口)
            事务及批量插入统一接口操作单元
            提供获取及提交事务，一系列与数据库交互的方法，它可以对调用层公开，为了减少连库次数
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Interfaces.IDateRange">
            <summary>
            时间范围接口
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Interfaces.IDateRange.StartDate">
            <summary>
                开始时间
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Interfaces.IDateRange.EndDate">
            <summary>
                结束时间
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Interfaces.IDependency">
            <summary>
            自定义接口 自动注册
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Interfaces.IHandlerType">
            <summary>
            处理类型
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Interfaces.INetCoreRepository`2">
            <summary>
            Repository扩展 支持批量插入 项目中就直接使用INetCoreRepository
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TPrimaryKey">实体主键类型</typeparam>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.INetCoreRepository`2.BulkInsertAsync(System.Collections.Generic.IList{`0})">
            <summary>
            sqlserver 批量插入
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.INetCoreRepository`2.BulkDeleteAsync(System.Collections.Generic.IList{`0})">
            <summary>
            sqlserver 批量删除
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.INetCoreRepository`2.PostgreBulkInsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Messaia.Net.PostgreSQL.BulkExtensions 批量插入
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.INetCoreRepository`1.BulkSqlInsert(System.Collections.Generic.IList{`0})">
            <summary>
            实体集除公共属性与字段外的insert sql参数化语句 读写分离--写
            </summary>
            <param name="entities">插入数据集合</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.INetCoreRepository`1.SqlInsert(`0)">
            <summary>
            单个实体sql插入
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.INetCoreRepository`1.SqlUpdate``1(Parakeet.NetCore.Dtos.KeyValueDto{System.Guid,System.String})">
            <summary> 
            更新操作的Sql语句 读写分离--写
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.INetCoreRepository`1.SqlDelete``1(Parakeet.NetCore.Dtos.InputIdDto)">
            <summary>
            删除单条实体的Sql参数化语句 读写分离--写
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.INetCoreRepository`1.BulkSqlDelete``1(Parakeet.NetCore.Dtos.InputIdsDto)">
            <summary>
            删除多条实体的Sql参数化语句 读写分离--写
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.INetCoreRepository`1.SqlQuery``1(Parakeet.NetCore.Dtos.InputIdDto)">
            <summary>
            根据id查询实体
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.INetCoreRepository`1.SqlQueryByCondition``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据表达式目录树转sql参数化查询
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Interfaces.INetCoreRepository`1.SqlQueryList``1(Parakeet.NetCore.Dtos.InputIdsDto)">
            <summary>
            根据ids查询实体集合
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Localization.NetCoreResource">
            <summary>
            可以使用InheritResource属性继承
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.MultiTenancy.MultiTenancyConsts">
            <summary>
            是否启用多租户配置
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Singletons.CustomModulePool">
            <summary>
            自定义Module 模块池
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Storage.CacheContainer`2">
            <summary>
            缓存容器
            </summary>
            <typeparam name="TMultilevelCache">多级缓存类类型</typeparam>
            <typeparam name="TData">缓存数据类型</typeparam>
        </member>
        <member name="F:Parakeet.NetCore.Storage.CacheContainer`2.MultilevelCaches">
            <summary>
            线程安全字典  string--TMultilevelCache 
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Storage.CacheContainer`2.MaximumLocalCache">
            <summary>
            本地缓存最大缓存数
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Storage.CacheContainer`2.AddCache(`0)">
            <summary>
            添加多级缓存实例
            </summary>
            <param name="multilevelCache">多级缓存实例</param>
        </member>
        <member name="M:Parakeet.NetCore.Storage.CacheContainer`2.GetCacheValue(System.String,System.Func{`0})">
            <summary>
            获取缓存值
            </summary>
            <param name="cacheKey"></param>
            <param name="multilevelCacheFunc">当缓存key不存在时，尝试添加添加缓存实例</param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Storage.CacheContainer`2.RemoveCache(System.String)">
            <summary>
            根据缓存key移除缓存对象
            </summary>
            <param name="cacheKey">缓存key</param>
        </member>
        <member name="T:Parakeet.NetCore.Storage.CacheKeys">
            <summary>
            存储所有缓存Key的缓存键设置类
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Storage.CacheKeys.Keys">
            <summary>
            所有缓存Key集合
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Storage.CacheKeys.LogCount">
            <summary>
            日志消息先后顺序计数
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.Storage.ICacheService">
            <summary>
            缓存实体类型properties服务接口
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Storage.ICacheService.GetCachePropertyInfos(System.Type)">
            <summary>
            缓存实体类型的 所有可用属性/字段(未被特殊属性标记：如BaseField)
            </summary>
            <param name="type"></param>
            <returns>返回当前缓存的实体属性集合</returns>
        </member>
        <member name="M:Parakeet.NetCore.Storage.ICacheService.GetCachePropNames(System.Type)">
            <summary>
            缓存类型的 所有可用属性/字段名称(未被特殊属性标记：如BaseField)
            </summary>
            <param name="type"></param>
            <returns>返回实体列名集合</returns>
        </member>
        <member name="M:Parakeet.NetCore.Storage.ITempFileCacheManager.SetFile(System.String,System.Byte[])">
            <summary>
            设置缓存二进制流
            </summary>
            <param name="token"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.Storage.ITempFileCacheManager.GetFile(System.String)">
            <summary>
            获取文件二进制流
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.Storage.MultilevelCache`1">
            <summary>
            多级缓存
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Storage.MultilevelCache`1._data">
            <summary>
            缓存泛型data
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Storage.MultilevelCache`1._cachingProvider">
            <summary>
            缓存接口提供器
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Storage.MultilevelCache`1.LastTime">
            <summary>
            上次更新时间 默认创建时间
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Storage.MultilevelCache`1.LocalExpireTimeSpan">
            <summary>
            本地一级缓存过期间隔，默认一分钟
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Storage.MultilevelCache`1.RedisExpireTimeSpan">
            <summary>
            Redis二级缓存过期间隔，默认一小时
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Storage.MultilevelCache`1.CacheKey">
            <summary>
            缓存key，建议使用redis的key命名规则，如Device:SerialNo
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Storage.MultilevelCache`1.GetCacheFunc">
            <summary>
            获取真实数据的委托
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Storage.MultilevelCache`1._monitorTimeLock">
            <summary>
            主时间锁，只有一个进程在控制它
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Storage.MultilevelCache`1.IsExpire">
            <summary>
            本地缓存是否过期
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Storage.MultilevelCache`1.AutoRefreshRedis">
            <summary>
            是否自动刷新Redis缓存
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.Storage.MultilevelCache`1.AutoRefreshRedisInterval">
            <summary>
            自动刷新Redis缓存的时间间隔,默认为30分钟刷新一次
            </summary>
        </member>
        <member name="F:Parakeet.NetCore.Storage.MultilevelCache`1._autoRefreshRedisTimer">
            <summary>
            自动刷新Redis缓存时间间隔Timer
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.Storage.MultilevelCache`1.#ctor(EasyCaching.Core.IEasyCachingProvider,System.String,System.Func{System.Threading.Tasks.Task{`0}},System.Boolean,System.Int32)">
            <summary>
            初始化多级缓存
            </summary>
            <param name="cachingProvider">缓存提供器</param>
            <param name="cacheKey">缓存key</param>
            <param name="getCacheFunc">获取缓存真实数据委托</param>
            <param name="autoRefreshRedis">是否自动刷新redis缓存</param>
            <param name="autoRefreshRedisInterval">默认自动刷新redis缓存时间间隔</param>
        </member>
        <member name="M:Parakeet.NetCore.Storage.MultilevelCache`1.GetCacheData">
            <summary>
            从一级缓存或二级、三级缓存中获取设备信息和转发信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.ValueObjects.Address">
            <summary>
                地址(值类型地址)
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.ValueObjects.Address.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
                带参构造函数
            </summary>
            <param name="detail">详细地址 门牌号</param>
            <param name="village">村</param>
            <param name="street">街道</param>
            <param name="area">区/县</param>
            <param name="city">城市/自治区/特区/港澳台</param>
            <param name="province">省市/自治区/直辖市/特区/港澳台</param>
            <param name="country">国家</param>
            <param name="zipCode">邮政编码</param>
            <param name="code">位置区域代码 --过滤数据用</param>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Address.Code">
            <summary>
                位置区域代码 Key 用于数据精准过滤
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Address.ZipCode">
            <summary>
                邮编
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Address.Country">
            <summary>
                国家
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Address.Province">
            <summary>
                省/直辖市/自治区
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Address.City">
            <summary>
                城市/市/(特/自治)区
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Address.Area">
            <summary>
                区/县
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Address.Street">
            <summary>
                街道
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Address.Village">
            <summary>
                村
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Address.Detail">
            <summary>
                详细地址(小区-楼栋-门牌号)
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Address.FullName">
            <summary>
                完整地址 扩展字段
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.ValueObjects.Address.GetAddressName">
            <summary>
                获取完整地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Parakeet.NetCore.ValueObjects.Address.UpdateAddress(Parakeet.NetCore.ValueObjects.Address)">
            <summary>
            更新Address
            </summary>
            <param name="address"></param>
        </member>
        <member name="T:Parakeet.NetCore.ValueObjects.Area">
            <summary>
                建筑面积
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Area.FloorArea">
            <summary>
                建筑面积
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Area.Total">
            <summary>
                总面积
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Area.Overground">
            <summary>
                地上面积
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Area.Underground">
            <summary>
                地下面积
            </summary>
        </member>
        <member name="T:Parakeet.NetCore.ValueObjects.Attachment">
            <summary>
                附件信息
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.ValueObjects.Attachment.#ctor">
            <summary>
            默认一个构造函数
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.ValueObjects.Attachment.#ctor(System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.String)">
            <summary>
            附件
            </summary>
            <param name="name">附件名称</param>
            <param name="extention">附件扩展名</param>
            <param name="size">附件尺寸</param>
            <param name="virtualPath">附件扩展虚拟路劲默认为空</param>
            <param name="path">附件扩展路劲默认为空</param>
            <param name="key">附件key</param>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Attachment.Key">
            <summary>
                文件key(使用外部文件服务产生的文件key)
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Attachment.Content">
            <summary>
                文件Content字符串,Base64或json字符串
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Attachment.Bytes">
            <summary>
                文件二进制流
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Attachment.Name">
            <summary>
                名称(包含扩展名) //Path.HasValue() ? System.IO.Path.GetFileName(Path) : string.Empty;
               (不含扩展名)      //Path.HasValue() ? Path.GetFileNameWithoutExtension(Path) : string.Empty;
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Attachment.Extention">
            <summary>
                文件扩展名 Path.HasValue() ? Path.GetExtension(Path)?.ToLower() : string.Empty;
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Attachment.Size">
            <summary>
                文件大小
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Attachment.Path">
            <summary>
                扩展字段:文件绝对路径/url地址等备用
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Attachment.VirtualPath">
            <summary>
                扩展字段:文件虚拟路径（相对路径备用）
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.ValueObjects.Attachment.GetFileNameWithoutExtension(System.String)">
            <summary>
            获取不含扩展名的文件名
            </summary>
            <param name="name">含扩展名的文件名</param>
            <returns></returns>
        </member>
        <member name="T:Parakeet.NetCore.ValueObjects.Specification">
            <summary>
                型号规格
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Specification.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Specification.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Specification.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Specification.Thickness">
            <summary>
            厚度
            </summary>
        </member>
        <member name="P:Parakeet.NetCore.ValueObjects.Specification.Diameter">
            <summary>
            直径
            </summary>
        </member>
        <member name="M:Parakeet.NetCore.ValueObjects.Specification.GetAtomicValues">
            <summary>
            自动属性
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
